//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SabaVEE1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SabaCandHEntities2 : DbContext
    {
        public SabaCandHEntities2()
            : base("name=SabaCandHEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Area> Areas { get; set; }
        public virtual DbSet<Blog> Blogs { get; set; }
        public virtual DbSet<Button> Buttons { get; set; }
        public virtual DbSet<Card> Cards { get; set; }
        public virtual DbSet<Catchment> Catchments { get; set; }
        public virtual DbSet<ChangeDB> ChangeDBs { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<CreateTokenByDongle> CreateTokenByDongles { get; set; }
        public virtual DbSet<Curve> Curves { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<DangelInfo> DangelInfoes { get; set; }
        public virtual DbSet<DataBasesInfo> DataBasesInfoes { get; set; }
        public virtual DbSet<DeviceModel> DeviceModels { get; set; }
        public virtual DbSet<DeviceType> DeviceTypes { get; set; }
        public virtual DbSet<EOffice> EOffices { get; set; }
        public virtual DbSet<Error> Errors { get; set; }
        public virtual DbSet<ESubOffice> ESubOffices { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<MessageText> MessageTexts { get; set; }
        public virtual DbSet<Meter> Meters { get; set; }
        public virtual DbSet<MeterError> MeterErrors { get; set; }
        public virtual DbSet<Modem> Modems { get; set; }
        public virtual DbSet<OBISS> OBISSes { get; set; }
        public virtual DbSet<OBISType> OBISTypes { get; set; }
        public virtual DbSet<OBISUnit> OBISUnits { get; set; }
        public virtual DbSet<OBISValueDetail> OBISValueDetails { get; set; }
        public virtual DbSet<OBISValueHeader> OBISValueHeaders { get; set; }
        public virtual DbSet<Office> Offices { get; set; }
        public virtual DbSet<OldOBISs> OldOBISses { get; set; }
        public virtual DbSet<Plain> Plains { get; set; }
        public virtual DbSet<Post> Posts { get; set; }
        public virtual DbSet<Province> Provinces { get; set; }
        public virtual DbSet<regulationRule> regulationRules { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<SoftversionToDeviceModel> SoftversionToDeviceModels { get; set; }
        public virtual DbSet<SourceType> SourceTypes { get; set; }
        public virtual DbSet<SubOffice> SubOffices { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Token> Tokens { get; set; }
        public virtual DbSet<TokenFromDangle> TokenFromDangles { get; set; }
        public virtual DbSet<Translate> Translates { get; set; }
        public virtual DbSet<UnitGroup> UnitGroups { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Window> Windows { get; set; }
        public virtual DbSet<ButtonAccess> ButtonAccesses { get; set; }
        public virtual DbSet<CardToMeter> CardToMeters { get; set; }
        public virtual DbSet<ConsumedActiveEnergy> ConsumedActiveEnergies { get; set; }
        public virtual DbSet<ConsumedMaxDemand> ConsumedMaxDemands { get; set; }
        public virtual DbSet<ConsumedWater> ConsumedWaters { get; set; }
        public virtual DbSet<Credit303> Credit303 { get; set; }
        public virtual DbSet<FixedOBI> FixedOBIS { get; set; }
        public virtual DbSet<GroupToProvince> GroupToProvinces { get; set; }
        public virtual DbSet<HashToGroup> HashToGroups { get; set; }
        public virtual DbSet<MeterToCustomer> MeterToCustomers { get; set; }
        public virtual DbSet<MeterToGroup> MeterToGroups { get; set; }
        public virtual DbSet<MonthName> MonthNames { get; set; }
        public virtual DbSet<OBISToReport> OBISToReports { get; set; }
        public virtual DbSet<OBISToSoftversion> OBISToSoftversions { get; set; }
        public virtual DbSet<ObjectofWindow> ObjectofWindows { get; set; }
        public virtual DbSet<RegionalOffice> RegionalOffices { get; set; }
        public virtual DbSet<StatusOBISsDesc> StatusOBISsDescs { get; set; }
        public virtual DbSet<TempMeter1> TempMeter1 { get; set; }
        public virtual DbSet<TempSaba> TempSabas { get; set; }
        public virtual DbSet<UserToGroup> UserToGroups { get; set; }
        public virtual DbSet<AccessUserToMeter> AccessUserToMeters { get; set; }
        public virtual DbSet<GroupsMeter> GroupsMeters { get; set; }
        public virtual DbSet<MaxReadDateView> MaxReadDateViews { get; set; }
        public virtual DbSet<MeterErrorView> MeterErrorViews { get; set; }
    
        [DbFunction("SabaCandHEntities2", "SplitStringList")]
        public virtual IQueryable<SplitStringList_Result> SplitStringList(string strList)
        {
            var strListParameter = strList != null ?
                new ObjectParameter("StrList", strList) :
                new ObjectParameter("StrList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitStringList_Result>("[SabaCandHEntities2].[SplitStringList](@StrList)", strListParameter);
        }
    
        public virtual int ConvertCardReaderToSabaCandH()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConvertCardReaderToSabaCandH");
        }
    
        public virtual int createjob()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createjob");
        }
    
        public virtual int DelCustomer(Nullable<decimal> customerID, ObjectParameter result, ObjectParameter errMSG)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelCustomer", customerIDParameter, result, errMSG);
        }
    
        public virtual int DelDataBase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelDataBase");
        }
    
        public virtual int DelDeviceModel(Nullable<decimal> deviceModelID, ObjectParameter result, ObjectParameter errMSG)
        {
            var deviceModelIDParameter = deviceModelID.HasValue ?
                new ObjectParameter("DeviceModelID", deviceModelID) :
                new ObjectParameter("DeviceModelID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelDeviceModel", deviceModelIDParameter, result, errMSG);
        }
    
        public virtual int DelGroups(Nullable<decimal> groupId, ObjectParameter result, ObjectParameter errMSG)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelGroups", groupIdParameter, result, errMSG);
        }
    
        public virtual int DelMeter(Nullable<decimal> meterID, ObjectParameter result, ObjectParameter errMSG)
        {
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelMeter", meterIDParameter, result, errMSG);
        }
    
        public virtual int DelMeterToCustomer(Nullable<decimal> meterID, Nullable<decimal> customerID, ObjectParameter result, ObjectParameter errMSG)
        {
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelMeterToCustomer", meterIDParameter, customerIDParameter, result, errMSG);
        }
    
        public virtual int DelMeterToGroup(Nullable<decimal> meterID, Nullable<decimal> groupID, Nullable<int> groupType, ObjectParameter result, ObjectParameter errMSG)
        {
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(decimal));
    
            var groupTypeParameter = groupType.HasValue ?
                new ObjectParameter("GroupType", groupType) :
                new ObjectParameter("GroupType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelMeterToGroup", meterIDParameter, groupIDParameter, groupTypeParameter, result, errMSG);
        }
    
        public virtual int DelModem(Nullable<decimal> modemID, ObjectParameter result, ObjectParameter errMSG)
        {
            var modemIDParameter = modemID.HasValue ?
                new ObjectParameter("ModemID", modemID) :
                new ObjectParameter("ModemID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelModem", modemIDParameter, result, errMSG);
        }
    
        public virtual int DelOBISs(Nullable<decimal> oBISID, ObjectParameter result, ObjectParameter errMSG)
        {
            var oBISIDParameter = oBISID.HasValue ?
                new ObjectParameter("OBISID", oBISID) :
                new ObjectParameter("OBISID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelOBISs", oBISIDParameter, result, errMSG);
        }
    
        public virtual int DelOBISsType(string type, Nullable<decimal> oBISID, ObjectParameter result, ObjectParameter errMSG)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var oBISIDParameter = oBISID.HasValue ?
                new ObjectParameter("OBISID", oBISID) :
                new ObjectParameter("OBISID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelOBISsType", typeParameter, oBISIDParameter, result, errMSG);
        }
    
        public virtual int DelOBISToReport(Nullable<decimal> reportID, Nullable<decimal> oBISTypeID, ObjectParameter result, ObjectParameter errMSG)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(decimal));
    
            var oBISTypeIDParameter = oBISTypeID.HasValue ?
                new ObjectParameter("OBISTypeID", oBISTypeID) :
                new ObjectParameter("OBISTypeID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelOBISToReport", reportIDParameter, oBISTypeIDParameter, result, errMSG);
        }
    
        public virtual int DelOBISToWindow(Nullable<decimal> oBISID, Nullable<int> windowID, ObjectParameter result, ObjectParameter errMSG)
        {
            var oBISIDParameter = oBISID.HasValue ?
                new ObjectParameter("OBISID", oBISID) :
                new ObjectParameter("OBISID", typeof(decimal));
    
            var windowIDParameter = windowID.HasValue ?
                new ObjectParameter("WindowID", windowID) :
                new ObjectParameter("WindowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelOBISToWindow", oBISIDParameter, windowIDParameter, result, errMSG);
        }
    
        public virtual int DelOBISTypeToReport(Nullable<decimal> reportID, ObjectParameter result, ObjectParameter errMSG)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelOBISTypeToReport", reportIDParameter, result, errMSG);
        }
    
        public virtual int DelReport(Nullable<decimal> reportID, ObjectParameter result, ObjectParameter errMSG)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelReport", reportIDParameter, result, errMSG);
        }
    
        public virtual int DelUser(Nullable<decimal> userID, ObjectParameter result, ObjectParameter errMSG)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelUser", userIDParameter, result, errMSG);
        }
    
        public virtual int DelUserToGroup(Nullable<decimal> userID, ObjectParameter result, ObjectParameter errMSG)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelUserToGroup", userIDParameter, result, errMSG);
        }
    
        public virtual int DropTableFromSQLCompact(ObjectParameter result, ObjectParameter errMSG)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DropTableFromSQLCompact", result, errMSG);
        }
    
        public virtual int EditeConsumedWater(Nullable<bool> periority)
        {
            var periorityParameter = periority.HasValue ?
                new ObjectParameter("periority", periority) :
                new ObjectParameter("periority", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditeConsumedWater", periorityParameter);
        }
    
        public virtual int execsabaschema(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("execsabaschema", filterParameter);
        }
    
        public virtual int ExportActiveEnergyPassedToSabaCandH(Nullable<int> mainTableID, Nullable<decimal> oBISValueHeaderID, Nullable<decimal> meterID, string readDate, string transferDate, ObjectParameter result, ObjectParameter errMSG)
        {
            var mainTableIDParameter = mainTableID.HasValue ?
                new ObjectParameter("MainTableID", mainTableID) :
                new ObjectParameter("MainTableID", typeof(int));
    
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var readDateParameter = readDate != null ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(string));
    
            var transferDateParameter = transferDate != null ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExportActiveEnergyPassedToSabaCandH", mainTableIDParameter, oBISValueHeaderIDParameter, meterIDParameter, readDateParameter, transferDateParameter, result, errMSG);
        }
    
        public virtual int ExportActiveEnergyToSabaCandH(Nullable<int> mainTableID, Nullable<decimal> oBISValueHeaderID, Nullable<decimal> meterID, string readDate, string transferDate, ObjectParameter result, ObjectParameter errMSG)
        {
            var mainTableIDParameter = mainTableID.HasValue ?
                new ObjectParameter("MainTableID", mainTableID) :
                new ObjectParameter("MainTableID", typeof(int));
    
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var readDateParameter = readDate != null ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(string));
    
            var transferDateParameter = transferDate != null ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExportActiveEnergyToSabaCandH", mainTableIDParameter, oBISValueHeaderIDParameter, meterIDParameter, readDateParameter, transferDateParameter, result, errMSG);
        }
    
        public virtual int ExportConSumedWaterToSabaCandH(Nullable<int> mainTableID, Nullable<decimal> oBISValueHeaderID, Nullable<decimal> meterID, string readDate, string transferDate, ObjectParameter result, ObjectParameter errMSG)
        {
            var mainTableIDParameter = mainTableID.HasValue ?
                new ObjectParameter("MainTableID", mainTableID) :
                new ObjectParameter("MainTableID", typeof(int));
    
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var readDateParameter = readDate != null ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(string));
    
            var transferDateParameter = transferDate != null ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExportConSumedWaterToSabaCandH", mainTableIDParameter, oBISValueHeaderIDParameter, meterIDParameter, readDateParameter, transferDateParameter, result, errMSG);
        }
    
        public virtual int ExportMainTableToSabaCandH(Nullable<int> mainTableID, Nullable<decimal> oBISValueHeaderID, Nullable<decimal> meterID, string readDate, string transferDate, ObjectParameter result, ObjectParameter errMSG)
        {
            var mainTableIDParameter = mainTableID.HasValue ?
                new ObjectParameter("MainTableID", mainTableID) :
                new ObjectParameter("MainTableID", typeof(int));
    
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var readDateParameter = readDate != null ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(string));
    
            var transferDateParameter = transferDate != null ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExportMainTableToSabaCandH", mainTableIDParameter, oBISValueHeaderIDParameter, meterIDParameter, readDateParameter, transferDateParameter, result, errMSG);
        }
    
        public virtual int ExportMaxDemandPassedToSabaCandH(Nullable<int> mainTableID, Nullable<decimal> oBISValueHeaderID, Nullable<decimal> meterID, string readDate, string transferDate, ObjectParameter result, ObjectParameter errMSG)
        {
            var mainTableIDParameter = mainTableID.HasValue ?
                new ObjectParameter("MainTableID", mainTableID) :
                new ObjectParameter("MainTableID", typeof(int));
    
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var readDateParameter = readDate != null ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(string));
    
            var transferDateParameter = transferDate != null ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExportMaxDemandPassedToSabaCandH", mainTableIDParameter, oBISValueHeaderIDParameter, meterIDParameter, readDateParameter, transferDateParameter, result, errMSG);
        }
    
        public virtual int ExportMaxDemandToSabaCandH(Nullable<int> mainTableID, Nullable<decimal> oBISValueHeaderID, Nullable<decimal> meterID, string readDate, string transferDate, ObjectParameter result, ObjectParameter errMSG)
        {
            var mainTableIDParameter = mainTableID.HasValue ?
                new ObjectParameter("MainTableID", mainTableID) :
                new ObjectParameter("MainTableID", typeof(int));
    
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var readDateParameter = readDate != null ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(string));
    
            var transferDateParameter = transferDate != null ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExportMaxDemandToSabaCandH", mainTableIDParameter, oBISValueHeaderIDParameter, meterIDParameter, readDateParameter, transferDateParameter, result, errMSG);
        }
    
        public virtual int ExportMeterError207(Nullable<decimal> result, string errMSG)
        {
            var resultParameter = result.HasValue ?
                new ObjectParameter("Result", result) :
                new ObjectParameter("Result", typeof(decimal));
    
            var errMSGParameter = errMSG != null ?
                new ObjectParameter("ErrMSG", errMSG) :
                new ObjectParameter("ErrMSG", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExportMeterError207", resultParameter, errMSGParameter);
        }
    
        public virtual int ExportRTariffToSabaCandH(Nullable<int> mainTableID, Nullable<decimal> oBISValueHeaderID, Nullable<decimal> meterID, string readDate, string transferDate, ObjectParameter result, ObjectParameter errMSG)
        {
            var mainTableIDParameter = mainTableID.HasValue ?
                new ObjectParameter("MainTableID", mainTableID) :
                new ObjectParameter("MainTableID", typeof(int));
    
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var readDateParameter = readDate != null ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(string));
    
            var transferDateParameter = transferDate != null ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExportRTariffToSabaCandH", mainTableIDParameter, oBISValueHeaderIDParameter, meterIDParameter, readDateParameter, transferDateParameter, result, errMSG);
        }
    
        public virtual int ExportSaba2SabaCandH(Nullable<decimal> groupID, Nullable<int> groupType, ObjectParameter result, ObjectParameter errMSG)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(decimal));
    
            var groupTypeParameter = groupType.HasValue ?
                new ObjectParameter("GroupType", groupType) :
                new ObjectParameter("GroupType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExportSaba2SabaCandH", groupIDParameter, groupTypeParameter, result, errMSG);
        }
    
        public virtual int ExportVEEConSumedWaterToSabaCandH(Nullable<int> mainTableID, Nullable<decimal> oBISValueHeaderID, Nullable<decimal> meterID, string readDate, string transferDate, ObjectParameter result, ObjectParameter errMSG)
        {
            var mainTableIDParameter = mainTableID.HasValue ?
                new ObjectParameter("MainTableID", mainTableID) :
                new ObjectParameter("MainTableID", typeof(int));
    
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var readDateParameter = readDate != null ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(string));
    
            var transferDateParameter = transferDate != null ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExportVEEConSumedWaterToSabaCandH", mainTableIDParameter, oBISValueHeaderIDParameter, meterIDParameter, readDateParameter, transferDateParameter, result, errMSG);
        }
    
        public virtual int ImportFromDLMSClient(Nullable<decimal> userID, Nullable<decimal> groupID, Nullable<int> groupType, Nullable<decimal> languageID, string path, string basicPath, string sEWMPath)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(decimal));
    
            var groupTypeParameter = groupType.HasValue ?
                new ObjectParameter("GroupType", groupType) :
                new ObjectParameter("GroupType", typeof(int));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(decimal));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var basicPathParameter = basicPath != null ?
                new ObjectParameter("BasicPath", basicPath) :
                new ObjectParameter("BasicPath", typeof(string));
    
            var sEWMPathParameter = sEWMPath != null ?
                new ObjectParameter("SEWMPath", sEWMPath) :
                new ObjectParameter("SEWMPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImportFromDLMSClient", userIDParameter, groupIDParameter, groupTypeParameter, languageIDParameter, pathParameter, basicPathParameter, sEWMPathParameter);
        }
    
        public virtual int ImportSmartCardReader(Nullable<decimal> groupID, Nullable<int> groupType, ObjectParameter result, ObjectParameter errMSG)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(decimal));
    
            var groupTypeParameter = groupType.HasValue ?
                new ObjectParameter("GroupType", groupType) :
                new ObjectParameter("GroupType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImportSmartCardReader", groupIDParameter, groupTypeParameter, result, errMSG);
        }
    
        public virtual int ImportSmartCardReaderConsumedActiveEnergy(Nullable<decimal> oBISValueHeaderID, Nullable<decimal> oBISID, Nullable<decimal> meterID, string value, string readDate, string fixedOBISCode, ObjectParameter result, ObjectParameter errMSG)
        {
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            var oBISIDParameter = oBISID.HasValue ?
                new ObjectParameter("OBISID", oBISID) :
                new ObjectParameter("OBISID", typeof(decimal));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var readDateParameter = readDate != null ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(string));
    
            var fixedOBISCodeParameter = fixedOBISCode != null ?
                new ObjectParameter("FixedOBISCode", fixedOBISCode) :
                new ObjectParameter("FixedOBISCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImportSmartCardReaderConsumedActiveEnergy", oBISValueHeaderIDParameter, oBISIDParameter, meterIDParameter, valueParameter, readDateParameter, fixedOBISCodeParameter, result, errMSG);
        }
    
        public virtual int ImportSmartCardReaderConsumedWater(Nullable<decimal> oBISValueHeaderID, Nullable<decimal> oBISID, Nullable<decimal> meterID, string value, string readDate, string fixedOBISCode, ObjectParameter result, ObjectParameter errMSG)
        {
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            var oBISIDParameter = oBISID.HasValue ?
                new ObjectParameter("OBISID", oBISID) :
                new ObjectParameter("OBISID", typeof(decimal));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var readDateParameter = readDate != null ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(string));
    
            var fixedOBISCodeParameter = fixedOBISCode != null ?
                new ObjectParameter("FixedOBISCode", fixedOBISCode) :
                new ObjectParameter("FixedOBISCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImportSmartCardReaderConsumedWater", oBISValueHeaderIDParameter, oBISIDParameter, meterIDParameter, valueParameter, readDateParameter, fixedOBISCodeParameter, result, errMSG);
        }
    
        public virtual int ImportSmartCardReaderToken(ObjectParameter result, ObjectParameter errMSG)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImportSmartCardReaderToken", result, errMSG);
        }
    
        public virtual int INSAttributeDTO(string typeString, string valueString, Nullable<bool> isDirty, Nullable<decimal> itemID, Nullable<decimal> meterID, ObjectParameter attributeDTOID, ObjectParameter result, ObjectParameter errMSG)
        {
            var typeStringParameter = typeString != null ?
                new ObjectParameter("TypeString", typeString) :
                new ObjectParameter("TypeString", typeof(string));
    
            var valueStringParameter = valueString != null ?
                new ObjectParameter("ValueString", valueString) :
                new ObjectParameter("ValueString", typeof(string));
    
            var isDirtyParameter = isDirty.HasValue ?
                new ObjectParameter("IsDirty", isDirty) :
                new ObjectParameter("IsDirty", typeof(bool));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(decimal));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSAttributeDTO", typeStringParameter, valueStringParameter, isDirtyParameter, itemIDParameter, meterIDParameter, attributeDTOID, result, errMSG);
        }
    
        public virtual int InsButtonAccess(Nullable<decimal> buttonID, Nullable<decimal> userID, Nullable<bool> canShow, Nullable<bool> canDelete, Nullable<bool> canEdit, Nullable<bool> canInsert, Nullable<bool> canImportFromFile, ObjectParameter result, ObjectParameter errMSG)
        {
            var buttonIDParameter = buttonID.HasValue ?
                new ObjectParameter("ButtonID", buttonID) :
                new ObjectParameter("ButtonID", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            var canShowParameter = canShow.HasValue ?
                new ObjectParameter("CanShow", canShow) :
                new ObjectParameter("CanShow", typeof(bool));
    
            var canDeleteParameter = canDelete.HasValue ?
                new ObjectParameter("CanDelete", canDelete) :
                new ObjectParameter("CanDelete", typeof(bool));
    
            var canEditParameter = canEdit.HasValue ?
                new ObjectParameter("CanEdit", canEdit) :
                new ObjectParameter("CanEdit", typeof(bool));
    
            var canInsertParameter = canInsert.HasValue ?
                new ObjectParameter("CanInsert", canInsert) :
                new ObjectParameter("CanInsert", typeof(bool));
    
            var canImportFromFileParameter = canImportFromFile.HasValue ?
                new ObjectParameter("CanImportFromFile", canImportFromFile) :
                new ObjectParameter("CanImportFromFile", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsButtonAccess", buttonIDParameter, userIDParameter, canShowParameter, canDeleteParameter, canEditParameter, canInsertParameter, canImportFromFileParameter, result, errMSG);
        }
    
        public virtual int INSCards(string cardNumber, ObjectParameter cardID, ObjectParameter result, ObjectParameter errMSG)
        {
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSCards", cardNumberParameter, cardID, result, errMSG);
        }
    
        public virtual int InsCardToMeter(Nullable<decimal> cardID, Nullable<decimal> meterID, string setDate, Nullable<decimal> userID, ObjectParameter result, ObjectParameter eRRMSG)
        {
            var cardIDParameter = cardID.HasValue ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(decimal));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var setDateParameter = setDate != null ?
                new ObjectParameter("SetDate", setDate) :
                new ObjectParameter("SetDate", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsCardToMeter", cardIDParameter, meterIDParameter, setDateParameter, userIDParameter, result, eRRMSG);
        }
    
        public virtual int InsChangeDB(string changeDate, string sofVersion, ObjectParameter iD, ObjectParameter result, ObjectParameter errMSG)
        {
            var changeDateParameter = changeDate != null ?
                new ObjectParameter("ChangeDate", changeDate) :
                new ObjectParameter("ChangeDate", typeof(string));
    
            var sofVersionParameter = sofVersion != null ?
                new ObjectParameter("SofVersion", sofVersion) :
                new ObjectParameter("SofVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsChangeDB", changeDateParameter, sofVersionParameter, iD, result, errMSG);
        }
    
        public virtual int InsCities(string cityCode, string cityName, Nullable<decimal> countryID, Nullable<decimal> provinceID, ObjectParameter cityID, ObjectParameter result, ObjectParameter errMSG)
        {
            var cityCodeParameter = cityCode != null ?
                new ObjectParameter("CityCode", cityCode) :
                new ObjectParameter("CityCode", typeof(string));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(decimal));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsCities", cityCodeParameter, cityNameParameter, countryIDParameter, provinceIDParameter, cityID, result, errMSG);
        }
    
        public virtual int INSConsumedActiveEnergy(Nullable<decimal> meterID, string aCtiveEnergyValue, string consumedDate, string readDate, Nullable<decimal> oBISID, string dateOfReceivedFromSource, Nullable<decimal> oBISValueHeaderID, ObjectParameter result, ObjectParameter errMSG)
        {
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var aCtiveEnergyValueParameter = aCtiveEnergyValue != null ?
                new ObjectParameter("ACtiveEnergyValue", aCtiveEnergyValue) :
                new ObjectParameter("ACtiveEnergyValue", typeof(string));
    
            var consumedDateParameter = consumedDate != null ?
                new ObjectParameter("ConsumedDate", consumedDate) :
                new ObjectParameter("ConsumedDate", typeof(string));
    
            var readDateParameter = readDate != null ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(string));
    
            var oBISIDParameter = oBISID.HasValue ?
                new ObjectParameter("OBISID", oBISID) :
                new ObjectParameter("OBISID", typeof(decimal));
    
            var dateOfReceivedFromSourceParameter = dateOfReceivedFromSource != null ?
                new ObjectParameter("DateOfReceivedFromSource", dateOfReceivedFromSource) :
                new ObjectParameter("DateOfReceivedFromSource", typeof(string));
    
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSConsumedActiveEnergy", meterIDParameter, aCtiveEnergyValueParameter, consumedDateParameter, readDateParameter, oBISIDParameter, dateOfReceivedFromSourceParameter, oBISValueHeaderIDParameter, result, errMSG);
        }
    
        public virtual int INSConsumedMaxDemand(Nullable<decimal> meterID, string maxDemandValue, string consumedDate, string readDate, Nullable<decimal> oBISID, string dateOfReceivedFromSource, Nullable<decimal> oBISValueHeaderID, ObjectParameter result, ObjectParameter errMSG)
        {
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var maxDemandValueParameter = maxDemandValue != null ?
                new ObjectParameter("MaxDemandValue", maxDemandValue) :
                new ObjectParameter("MaxDemandValue", typeof(string));
    
            var consumedDateParameter = consumedDate != null ?
                new ObjectParameter("ConsumedDate", consumedDate) :
                new ObjectParameter("ConsumedDate", typeof(string));
    
            var readDateParameter = readDate != null ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(string));
    
            var oBISIDParameter = oBISID.HasValue ?
                new ObjectParameter("OBISID", oBISID) :
                new ObjectParameter("OBISID", typeof(decimal));
    
            var dateOfReceivedFromSourceParameter = dateOfReceivedFromSource != null ?
                new ObjectParameter("DateOfReceivedFromSource", dateOfReceivedFromSource) :
                new ObjectParameter("DateOfReceivedFromSource", typeof(string));
    
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSConsumedMaxDemand", meterIDParameter, maxDemandValueParameter, consumedDateParameter, readDateParameter, oBISIDParameter, dateOfReceivedFromSourceParameter, oBISValueHeaderIDParameter, result, errMSG);
        }
    
        public virtual int INSConsumedWater(Nullable<decimal> meterID, string consumedWater, string vEEConsumedWater, string consumedDate, string readDate, Nullable<decimal> oBISID, string dateOfReceivedFromSource, Nullable<decimal> oBISValueHeaderID, ObjectParameter result, ObjectParameter errMSG)
        {
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var consumedWaterParameter = consumedWater != null ?
                new ObjectParameter("ConsumedWater", consumedWater) :
                new ObjectParameter("ConsumedWater", typeof(string));
    
            var vEEConsumedWaterParameter = vEEConsumedWater != null ?
                new ObjectParameter("VEEConsumedWater", vEEConsumedWater) :
                new ObjectParameter("VEEConsumedWater", typeof(string));
    
            var consumedDateParameter = consumedDate != null ?
                new ObjectParameter("ConsumedDate", consumedDate) :
                new ObjectParameter("ConsumedDate", typeof(string));
    
            var readDateParameter = readDate != null ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(string));
    
            var oBISIDParameter = oBISID.HasValue ?
                new ObjectParameter("OBISID", oBISID) :
                new ObjectParameter("OBISID", typeof(decimal));
    
            var dateOfReceivedFromSourceParameter = dateOfReceivedFromSource != null ?
                new ObjectParameter("DateOfReceivedFromSource", dateOfReceivedFromSource) :
                new ObjectParameter("DateOfReceivedFromSource", typeof(string));
    
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSConsumedWater", meterIDParameter, consumedWaterParameter, vEEConsumedWaterParameter, consumedDateParameter, readDateParameter, oBISIDParameter, dateOfReceivedFromSourceParameter, oBISValueHeaderIDParameter, result, errMSG);
        }
    
        public virtual int InsCreateTokenByDongle(Nullable<int> dayNumber, Nullable<int> minuteOfDay, Nullable<decimal> systemID, Nullable<int> sequenceNumber, string tokenID, Nullable<int> currentYear, Nullable<decimal> meterID, ObjectParameter tokenFromDongleID, ObjectParameter result, ObjectParameter errMSG)
        {
            var dayNumberParameter = dayNumber.HasValue ?
                new ObjectParameter("DayNumber", dayNumber) :
                new ObjectParameter("DayNumber", typeof(int));
    
            var minuteOfDayParameter = minuteOfDay.HasValue ?
                new ObjectParameter("MinuteOfDay", minuteOfDay) :
                new ObjectParameter("MinuteOfDay", typeof(int));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(decimal));
    
            var sequenceNumberParameter = sequenceNumber.HasValue ?
                new ObjectParameter("SequenceNumber", sequenceNumber) :
                new ObjectParameter("SequenceNumber", typeof(int));
    
            var tokenIDParameter = tokenID != null ?
                new ObjectParameter("TokenID", tokenID) :
                new ObjectParameter("TokenID", typeof(string));
    
            var currentYearParameter = currentYear.HasValue ?
                new ObjectParameter("CurrentYear", currentYear) :
                new ObjectParameter("CurrentYear", typeof(int));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsCreateTokenByDongle", dayNumberParameter, minuteOfDayParameter, systemIDParameter, sequenceNumberParameter, tokenIDParameter, currentYearParameter, meterIDParameter, tokenFromDongleID, result, errMSG);
        }
    
        public virtual int InsCredit303(Nullable<decimal> meterID, Nullable<int> credit_Capability_Activation, string creditStartDate, Nullable<int> disconnectivity_On_Negative_Credit, Nullable<int> disconnectivity_On_Expired_Credit, Nullable<decimal> oBISValueHeaderID, ObjectParameter result, ObjectParameter errMSG)
        {
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var credit_Capability_ActivationParameter = credit_Capability_Activation.HasValue ?
                new ObjectParameter("credit_Capability_Activation", credit_Capability_Activation) :
                new ObjectParameter("credit_Capability_Activation", typeof(int));
    
            var creditStartDateParameter = creditStartDate != null ?
                new ObjectParameter("creditStartDate", creditStartDate) :
                new ObjectParameter("creditStartDate", typeof(string));
    
            var disconnectivity_On_Negative_CreditParameter = disconnectivity_On_Negative_Credit.HasValue ?
                new ObjectParameter("disconnectivity_On_Negative_Credit", disconnectivity_On_Negative_Credit) :
                new ObjectParameter("disconnectivity_On_Negative_Credit", typeof(int));
    
            var disconnectivity_On_Expired_CreditParameter = disconnectivity_On_Expired_Credit.HasValue ?
                new ObjectParameter("disconnectivity_On_Expired_Credit", disconnectivity_On_Expired_Credit) :
                new ObjectParameter("disconnectivity_On_Expired_Credit", typeof(int));
    
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsCredit303", meterIDParameter, credit_Capability_ActivationParameter, creditStartDateParameter, disconnectivity_On_Negative_CreditParameter, disconnectivity_On_Expired_CreditParameter, oBISValueHeaderIDParameter, result, errMSG);
        }
    
        public virtual int InsCurve(Nullable<decimal> meterID, Nullable<decimal> readoutID, string curveCode, string point1Flow, string point2Flow, string point3Flow, string point4Flow, string point5Flow, string point6Flow, string point1Power, string point2Power, string point3Power, string point4Power, string point5Power, string point6Power, string noloadPower, string calibrationFlow, string calibrationPower, ObjectParameter errMSG, ObjectParameter result)
        {
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var readoutIDParameter = readoutID.HasValue ?
                new ObjectParameter("ReadoutID", readoutID) :
                new ObjectParameter("ReadoutID", typeof(decimal));
    
            var curveCodeParameter = curveCode != null ?
                new ObjectParameter("CurveCode", curveCode) :
                new ObjectParameter("CurveCode", typeof(string));
    
            var point1FlowParameter = point1Flow != null ?
                new ObjectParameter("Point1Flow", point1Flow) :
                new ObjectParameter("Point1Flow", typeof(string));
    
            var point2FlowParameter = point2Flow != null ?
                new ObjectParameter("Point2Flow", point2Flow) :
                new ObjectParameter("Point2Flow", typeof(string));
    
            var point3FlowParameter = point3Flow != null ?
                new ObjectParameter("Point3Flow", point3Flow) :
                new ObjectParameter("Point3Flow", typeof(string));
    
            var point4FlowParameter = point4Flow != null ?
                new ObjectParameter("Point4Flow", point4Flow) :
                new ObjectParameter("Point4Flow", typeof(string));
    
            var point5FlowParameter = point5Flow != null ?
                new ObjectParameter("Point5Flow", point5Flow) :
                new ObjectParameter("Point5Flow", typeof(string));
    
            var point6FlowParameter = point6Flow != null ?
                new ObjectParameter("Point6Flow", point6Flow) :
                new ObjectParameter("Point6Flow", typeof(string));
    
            var point1PowerParameter = point1Power != null ?
                new ObjectParameter("Point1Power", point1Power) :
                new ObjectParameter("Point1Power", typeof(string));
    
            var point2PowerParameter = point2Power != null ?
                new ObjectParameter("Point2Power", point2Power) :
                new ObjectParameter("Point2Power", typeof(string));
    
            var point3PowerParameter = point3Power != null ?
                new ObjectParameter("Point3Power", point3Power) :
                new ObjectParameter("Point3Power", typeof(string));
    
            var point4PowerParameter = point4Power != null ?
                new ObjectParameter("Point4Power", point4Power) :
                new ObjectParameter("Point4Power", typeof(string));
    
            var point5PowerParameter = point5Power != null ?
                new ObjectParameter("Point5Power", point5Power) :
                new ObjectParameter("Point5Power", typeof(string));
    
            var point6PowerParameter = point6Power != null ?
                new ObjectParameter("Point6Power", point6Power) :
                new ObjectParameter("Point6Power", typeof(string));
    
            var noloadPowerParameter = noloadPower != null ?
                new ObjectParameter("NoloadPower", noloadPower) :
                new ObjectParameter("NoloadPower", typeof(string));
    
            var calibrationFlowParameter = calibrationFlow != null ?
                new ObjectParameter("CalibrationFlow", calibrationFlow) :
                new ObjectParameter("CalibrationFlow", typeof(string));
    
            var calibrationPowerParameter = calibrationPower != null ?
                new ObjectParameter("CalibrationPower", calibrationPower) :
                new ObjectParameter("CalibrationPower", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsCurve", meterIDParameter, readoutIDParameter, curveCodeParameter, point1FlowParameter, point2FlowParameter, point3FlowParameter, point4FlowParameter, point5FlowParameter, point6FlowParameter, point1PowerParameter, point2PowerParameter, point3PowerParameter, point4PowerParameter, point5PowerParameter, point6PowerParameter, noloadPowerParameter, calibrationFlowParameter, calibrationPowerParameter, errMSG, result);
        }
    
        public virtual int INSCustomers(string customerName, string customerfamily, string customerTel, string customerAddress, string watersubscriptionNumber, string elecsubscriptionNumber, Nullable<decimal> locationID, Nullable<decimal> nationalCode, string mobileNumber, string longitude, string latitude, string postCode, Nullable<decimal> officeID, Nullable<decimal> eofficeID, Nullable<decimal> wSubofficeID, Nullable<decimal> eSubofficeID, string dossierNumber, string flowindossier, string diameterofpipe, string welldepth, string wellLicense, string wellAddress, string fatherName, Nullable<int> typeOfUse, Nullable<decimal> languageID, ObjectParameter customerID, ObjectParameter result, ObjectParameter errMSG)
        {
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerfamilyParameter = customerfamily != null ?
                new ObjectParameter("Customerfamily", customerfamily) :
                new ObjectParameter("Customerfamily", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var watersubscriptionNumberParameter = watersubscriptionNumber != null ?
                new ObjectParameter("WatersubscriptionNumber", watersubscriptionNumber) :
                new ObjectParameter("WatersubscriptionNumber", typeof(string));
    
            var elecsubscriptionNumberParameter = elecsubscriptionNumber != null ?
                new ObjectParameter("ElecsubscriptionNumber", elecsubscriptionNumber) :
                new ObjectParameter("ElecsubscriptionNumber", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(decimal));
    
            var nationalCodeParameter = nationalCode.HasValue ?
                new ObjectParameter("NationalCode", nationalCode) :
                new ObjectParameter("NationalCode", typeof(decimal));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var postCodeParameter = postCode != null ?
                new ObjectParameter("PostCode", postCode) :
                new ObjectParameter("PostCode", typeof(string));
    
            var officeIDParameter = officeID.HasValue ?
                new ObjectParameter("officeID", officeID) :
                new ObjectParameter("officeID", typeof(decimal));
    
            var eofficeIDParameter = eofficeID.HasValue ?
                new ObjectParameter("EofficeID", eofficeID) :
                new ObjectParameter("EofficeID", typeof(decimal));
    
            var wSubofficeIDParameter = wSubofficeID.HasValue ?
                new ObjectParameter("WSubofficeID", wSubofficeID) :
                new ObjectParameter("WSubofficeID", typeof(decimal));
    
            var eSubofficeIDParameter = eSubofficeID.HasValue ?
                new ObjectParameter("ESubofficeID", eSubofficeID) :
                new ObjectParameter("ESubofficeID", typeof(decimal));
    
            var dossierNumberParameter = dossierNumber != null ?
                new ObjectParameter("DossierNumber", dossierNumber) :
                new ObjectParameter("DossierNumber", typeof(string));
    
            var flowindossierParameter = flowindossier != null ?
                new ObjectParameter("Flowindossier", flowindossier) :
                new ObjectParameter("Flowindossier", typeof(string));
    
            var diameterofpipeParameter = diameterofpipe != null ?
                new ObjectParameter("Diameterofpipe", diameterofpipe) :
                new ObjectParameter("Diameterofpipe", typeof(string));
    
            var welldepthParameter = welldepth != null ?
                new ObjectParameter("Welldepth", welldepth) :
                new ObjectParameter("Welldepth", typeof(string));
    
            var wellLicenseParameter = wellLicense != null ?
                new ObjectParameter("WellLicense", wellLicense) :
                new ObjectParameter("WellLicense", typeof(string));
    
            var wellAddressParameter = wellAddress != null ?
                new ObjectParameter("WellAddress", wellAddress) :
                new ObjectParameter("WellAddress", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var typeOfUseParameter = typeOfUse.HasValue ?
                new ObjectParameter("TypeOfUse", typeOfUse) :
                new ObjectParameter("TypeOfUse", typeof(int));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSCustomers", customerNameParameter, customerfamilyParameter, customerTelParameter, customerAddressParameter, watersubscriptionNumberParameter, elecsubscriptionNumberParameter, locationIDParameter, nationalCodeParameter, mobileNumberParameter, longitudeParameter, latitudeParameter, postCodeParameter, officeIDParameter, eofficeIDParameter, wSubofficeIDParameter, eSubofficeIDParameter, dossierNumberParameter, flowindossierParameter, diameterofpipeParameter, welldepthParameter, wellLicenseParameter, wellAddressParameter, fatherNameParameter, typeOfUseParameter, languageIDParameter, customerID, result, errMSG);
        }
    
        public virtual int InsDangelInfo(string dangelPass, string dangelSerial, string connectingDevice, string softwareVersion, string country, string maxprivilege, string expireDate, string sump, string lSBCode, string proviceCode, ObjectParameter dangelID, ObjectParameter result, ObjectParameter errMSG)
        {
            var dangelPassParameter = dangelPass != null ?
                new ObjectParameter("DangelPass", dangelPass) :
                new ObjectParameter("DangelPass", typeof(string));
    
            var dangelSerialParameter = dangelSerial != null ?
                new ObjectParameter("DangelSerial", dangelSerial) :
                new ObjectParameter("DangelSerial", typeof(string));
    
            var connectingDeviceParameter = connectingDevice != null ?
                new ObjectParameter("ConnectingDevice", connectingDevice) :
                new ObjectParameter("ConnectingDevice", typeof(string));
    
            var softwareVersionParameter = softwareVersion != null ?
                new ObjectParameter("SoftwareVersion", softwareVersion) :
                new ObjectParameter("SoftwareVersion", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var maxprivilegeParameter = maxprivilege != null ?
                new ObjectParameter("Maxprivilege", maxprivilege) :
                new ObjectParameter("Maxprivilege", typeof(string));
    
            var expireDateParameter = expireDate != null ?
                new ObjectParameter("ExpireDate", expireDate) :
                new ObjectParameter("ExpireDate", typeof(string));
    
            var sumpParameter = sump != null ?
                new ObjectParameter("Sump", sump) :
                new ObjectParameter("Sump", typeof(string));
    
            var lSBCodeParameter = lSBCode != null ?
                new ObjectParameter("LSBCode", lSBCode) :
                new ObjectParameter("LSBCode", typeof(string));
    
            var proviceCodeParameter = proviceCode != null ?
                new ObjectParameter("ProviceCode", proviceCode) :
                new ObjectParameter("ProviceCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsDangelInfo", dangelPassParameter, dangelSerialParameter, connectingDeviceParameter, softwareVersionParameter, countryParameter, maxprivilegeParameter, expireDateParameter, sumpParameter, lSBCodeParameter, proviceCodeParameter, dangelID, result, errMSG);
        }
    
        public virtual int InsDeviceModel(string deviceModelName, string manufacturerName, string deviceName, string messageVersion, ObjectParameter deviceModelID, ObjectParameter deviceTypeID, ObjectParameter result, ObjectParameter errMSG)
        {
            var deviceModelNameParameter = deviceModelName != null ?
                new ObjectParameter("DeviceModelName", deviceModelName) :
                new ObjectParameter("DeviceModelName", typeof(string));
    
            var manufacturerNameParameter = manufacturerName != null ?
                new ObjectParameter("ManufacturerName", manufacturerName) :
                new ObjectParameter("ManufacturerName", typeof(string));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("DeviceName", deviceName) :
                new ObjectParameter("DeviceName", typeof(string));
    
            var messageVersionParameter = messageVersion != null ?
                new ObjectParameter("MessageVersion", messageVersion) :
                new ObjectParameter("MessageVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsDeviceModel", deviceModelNameParameter, manufacturerNameParameter, deviceNameParameter, messageVersionParameter, deviceModelID, deviceTypeID, result, errMSG);
        }
    
        public virtual int InsDeviceType(string deviceName, ObjectParameter deviceTypeID, ObjectParameter result, ObjectParameter errMSG)
        {
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("DeviceName", deviceName) :
                new ObjectParameter("DeviceName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsDeviceType", deviceNameParameter, deviceTypeID, result, errMSG);
        }
    
        public virtual int InsGroups(string groupName, string hashValue, ObjectParameter groupID, ObjectParameter result, ObjectParameter errMSG)
        {
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var hashValueParameter = hashValue != null ?
                new ObjectParameter("HashValue", hashValue) :
                new ObjectParameter("HashValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsGroups", groupNameParameter, hashValueParameter, groupID, result, errMSG);
        }
    
        public virtual int InsHashToGroup(Nullable<decimal> groupID, Nullable<decimal> userID, Nullable<int> hashNumber, string setDate, ObjectParameter result, ObjectParameter errMSG)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            var hashNumberParameter = hashNumber.HasValue ?
                new ObjectParameter("HashNumber", hashNumber) :
                new ObjectParameter("HashNumber", typeof(int));
    
            var setDateParameter = setDate != null ?
                new ObjectParameter("SetDate", setDate) :
                new ObjectParameter("SetDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsHashToGroup", groupIDParameter, userIDParameter, hashNumberParameter, setDateParameter, result, errMSG);
        }
    
        public virtual int INSLocations(Nullable<decimal> plainID, Nullable<decimal> catchmentID, Nullable<decimal> areaID, Nullable<decimal> cityID, ObjectParameter locationID, ObjectParameter result, ObjectParameter errMSG)
        {
            var plainIDParameter = plainID.HasValue ?
                new ObjectParameter("PlainID", plainID) :
                new ObjectParameter("PlainID", typeof(decimal));
    
            var catchmentIDParameter = catchmentID.HasValue ?
                new ObjectParameter("CatchmentID", catchmentID) :
                new ObjectParameter("CatchmentID", typeof(decimal));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(decimal));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSLocations", plainIDParameter, catchmentIDParameter, areaIDParameter, cityIDParameter, locationID, result, errMSG);
        }
    
        public virtual int INSMeter(string meterNumber, Nullable<decimal> deviceModelID, Nullable<bool> isDirect, Nullable<decimal> softversionToDeviceModelID, string softversion, Nullable<decimal> modemID, Nullable<decimal> customerID, Nullable<decimal> groupID, Nullable<int> groupType, Nullable<bool> valid, ObjectParameter meterID, ObjectParameter errMSG, ObjectParameter result)
        {
            var meterNumberParameter = meterNumber != null ?
                new ObjectParameter("MeterNumber", meterNumber) :
                new ObjectParameter("MeterNumber", typeof(string));
    
            var deviceModelIDParameter = deviceModelID.HasValue ?
                new ObjectParameter("DeviceModelID", deviceModelID) :
                new ObjectParameter("DeviceModelID", typeof(decimal));
    
            var isDirectParameter = isDirect.HasValue ?
                new ObjectParameter("IsDirect", isDirect) :
                new ObjectParameter("IsDirect", typeof(bool));
    
            var softversionToDeviceModelIDParameter = softversionToDeviceModelID.HasValue ?
                new ObjectParameter("SoftversionToDeviceModelID", softversionToDeviceModelID) :
                new ObjectParameter("SoftversionToDeviceModelID", typeof(decimal));
    
            var softversionParameter = softversion != null ?
                new ObjectParameter("Softversion", softversion) :
                new ObjectParameter("Softversion", typeof(string));
    
            var modemIDParameter = modemID.HasValue ?
                new ObjectParameter("ModemID", modemID) :
                new ObjectParameter("ModemID", typeof(decimal));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(decimal));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(decimal));
    
            var groupTypeParameter = groupType.HasValue ?
                new ObjectParameter("GroupType", groupType) :
                new ObjectParameter("GroupType", typeof(int));
    
            var validParameter = valid.HasValue ?
                new ObjectParameter("Valid", valid) :
                new ObjectParameter("Valid", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSMeter", meterNumberParameter, deviceModelIDParameter, isDirectParameter, softversionToDeviceModelIDParameter, softversionParameter, modemIDParameter, customerIDParameter, groupIDParameter, groupTypeParameter, validParameter, meterID, errMSG, result);
        }
    
        public virtual int InsMeterError(Nullable<decimal> oBISValueHeaderID, string softwareVersion, Nullable<decimal> meterID, Nullable<decimal> oBISID, string oBIS, string value, ObjectParameter result, ObjectParameter errMSG)
        {
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            var softwareVersionParameter = softwareVersion != null ?
                new ObjectParameter("SoftwareVersion", softwareVersion) :
                new ObjectParameter("SoftwareVersion", typeof(string));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var oBISIDParameter = oBISID.HasValue ?
                new ObjectParameter("OBISID", oBISID) :
                new ObjectParameter("OBISID", typeof(decimal));
    
            var oBISParameter = oBIS != null ?
                new ObjectParameter("OBIS", oBIS) :
                new ObjectParameter("OBIS", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsMeterError", oBISValueHeaderIDParameter, softwareVersionParameter, meterIDParameter, oBISIDParameter, oBISParameter, valueParameter, result, errMSG);
        }
    
        public virtual int InsMeterError207(Nullable<decimal> oBISValueHeaderID, string softwareVersion, Nullable<decimal> meterID, Nullable<decimal> oBISID, string oBIS, string value, ObjectParameter result, ObjectParameter errMSG)
        {
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            var softwareVersionParameter = softwareVersion != null ?
                new ObjectParameter("SoftwareVersion", softwareVersion) :
                new ObjectParameter("SoftwareVersion", typeof(string));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var oBISIDParameter = oBISID.HasValue ?
                new ObjectParameter("OBISID", oBISID) :
                new ObjectParameter("OBISID", typeof(decimal));
    
            var oBISParameter = oBIS != null ?
                new ObjectParameter("OBIS", oBIS) :
                new ObjectParameter("OBIS", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsMeterError207", oBISValueHeaderIDParameter, softwareVersionParameter, meterIDParameter, oBISIDParameter, oBISParameter, valueParameter, result, errMSG);
        }
    
        public virtual int InsMeterErrordet(Nullable<decimal> oBISValueHeaderID, Nullable<decimal> meterID, Nullable<decimal> oBISID, Nullable<decimal> errorID, ObjectParameter result, ObjectParameter errMSG)
        {
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var oBISIDParameter = oBISID.HasValue ?
                new ObjectParameter("OBISID", oBISID) :
                new ObjectParameter("OBISID", typeof(decimal));
    
            var errorIDParameter = errorID.HasValue ?
                new ObjectParameter("ErrorID", errorID) :
                new ObjectParameter("ErrorID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsMeterErrordet", oBISValueHeaderIDParameter, meterIDParameter, oBISIDParameter, errorIDParameter, result, errMSG);
        }
    
        public virtual int InsMeterToCustomer(Nullable<decimal> customerID, Nullable<decimal> meterID, Nullable<bool> valid, string setDate, ObjectParameter result, ObjectParameter errMSG)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(decimal));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var validParameter = valid.HasValue ?
                new ObjectParameter("Valid", valid) :
                new ObjectParameter("Valid", typeof(bool));
    
            var setDateParameter = setDate != null ?
                new ObjectParameter("SetDate", setDate) :
                new ObjectParameter("SetDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsMeterToCustomer", customerIDParameter, meterIDParameter, validParameter, setDateParameter, result, errMSG);
        }
    
        public virtual int InsMeterToGroup(Nullable<decimal> meterID, Nullable<decimal> groupID, Nullable<int> groupType, ObjectParameter result, ObjectParameter errMSG)
        {
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(decimal));
    
            var groupTypeParameter = groupType.HasValue ?
                new ObjectParameter("GroupType", groupType) :
                new ObjectParameter("GroupType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsMeterToGroup", meterIDParameter, groupIDParameter, groupTypeParameter, result, errMSG);
        }
    
        public virtual int INSMODEM(string modemNumber, string simNumber, Nullable<decimal> softversionToDeviceModelID, Nullable<decimal> deviceModelID, ObjectParameter modemID, ObjectParameter result, ObjectParameter errMSG)
        {
            var modemNumberParameter = modemNumber != null ?
                new ObjectParameter("ModemNumber", modemNumber) :
                new ObjectParameter("ModemNumber", typeof(string));
    
            var simNumberParameter = simNumber != null ?
                new ObjectParameter("SimNumber", simNumber) :
                new ObjectParameter("SimNumber", typeof(string));
    
            var softversionToDeviceModelIDParameter = softversionToDeviceModelID.HasValue ?
                new ObjectParameter("SoftversionToDeviceModelID", softversionToDeviceModelID) :
                new ObjectParameter("SoftversionToDeviceModelID", typeof(decimal));
    
            var deviceModelIDParameter = deviceModelID.HasValue ?
                new ObjectParameter("DeviceModelID", deviceModelID) :
                new ObjectParameter("DeviceModelID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSMODEM", modemNumberParameter, simNumberParameter, softversionToDeviceModelIDParameter, deviceModelIDParameter, modemID, result, errMSG);
        }
    
        public virtual int INSOBISs(string obisCode, string obis, string obisFarsiDesc, string obisLatinDesc, string obisArabicDesc, Nullable<decimal> deviceTypeID, string oBISUnitDesc, Nullable<decimal> obisTypeID, string format, Nullable<int> classID, string cardFormatType, string hHuFormatType, string unitConvertType, ObjectParameter fixedOBISCode, ObjectParameter returnUnitConvertType, ObjectParameter returnOBISType, ObjectParameter oBISID, ObjectParameter result, ObjectParameter errMSG)
        {
            var obisCodeParameter = obisCode != null ?
                new ObjectParameter("ObisCode", obisCode) :
                new ObjectParameter("ObisCode", typeof(string));
    
            var obisParameter = obis != null ?
                new ObjectParameter("Obis", obis) :
                new ObjectParameter("Obis", typeof(string));
    
            var obisFarsiDescParameter = obisFarsiDesc != null ?
                new ObjectParameter("ObisFarsiDesc", obisFarsiDesc) :
                new ObjectParameter("ObisFarsiDesc", typeof(string));
    
            var obisLatinDescParameter = obisLatinDesc != null ?
                new ObjectParameter("ObisLatinDesc", obisLatinDesc) :
                new ObjectParameter("ObisLatinDesc", typeof(string));
    
            var obisArabicDescParameter = obisArabicDesc != null ?
                new ObjectParameter("ObisArabicDesc", obisArabicDesc) :
                new ObjectParameter("ObisArabicDesc", typeof(string));
    
            var deviceTypeIDParameter = deviceTypeID.HasValue ?
                new ObjectParameter("DeviceTypeID", deviceTypeID) :
                new ObjectParameter("DeviceTypeID", typeof(decimal));
    
            var oBISUnitDescParameter = oBISUnitDesc != null ?
                new ObjectParameter("OBISUnitDesc", oBISUnitDesc) :
                new ObjectParameter("OBISUnitDesc", typeof(string));
    
            var obisTypeIDParameter = obisTypeID.HasValue ?
                new ObjectParameter("ObisTypeID", obisTypeID) :
                new ObjectParameter("ObisTypeID", typeof(decimal));
    
            var formatParameter = format != null ?
                new ObjectParameter("Format", format) :
                new ObjectParameter("Format", typeof(string));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var cardFormatTypeParameter = cardFormatType != null ?
                new ObjectParameter("CardFormatType", cardFormatType) :
                new ObjectParameter("CardFormatType", typeof(string));
    
            var hHuFormatTypeParameter = hHuFormatType != null ?
                new ObjectParameter("HHuFormatType", hHuFormatType) :
                new ObjectParameter("HHuFormatType", typeof(string));
    
            var unitConvertTypeParameter = unitConvertType != null ?
                new ObjectParameter("UnitConvertType", unitConvertType) :
                new ObjectParameter("UnitConvertType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSOBISs", obisCodeParameter, obisParameter, obisFarsiDescParameter, obisLatinDescParameter, obisArabicDescParameter, deviceTypeIDParameter, oBISUnitDescParameter, obisTypeIDParameter, formatParameter, classIDParameter, cardFormatTypeParameter, hHuFormatTypeParameter, unitConvertTypeParameter, fixedOBISCode, returnUnitConvertType, returnOBISType, oBISID, result, errMSG);
        }
    
        public virtual int InsOBISsFromFile(string filePath, ObjectParameter result, ObjectParameter errMSG)
        {
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsOBISsFromFile", filePathParameter, result, errMSG);
        }
    
        public virtual int INSOBISToReport(Nullable<decimal> reportID, Nullable<decimal> oBISID, Nullable<decimal> sheetID, Nullable<decimal> oBISTypeID, ObjectParameter result, ObjectParameter errMSG)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(decimal));
    
            var oBISIDParameter = oBISID.HasValue ?
                new ObjectParameter("OBISID", oBISID) :
                new ObjectParameter("OBISID", typeof(decimal));
    
            var sheetIDParameter = sheetID.HasValue ?
                new ObjectParameter("SheetID", sheetID) :
                new ObjectParameter("SheetID", typeof(decimal));
    
            var oBISTypeIDParameter = oBISTypeID.HasValue ?
                new ObjectParameter("OBISTypeID", oBISTypeID) :
                new ObjectParameter("OBISTypeID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSOBISToReport", reportIDParameter, oBISIDParameter, sheetIDParameter, oBISTypeIDParameter, result, errMSG);
        }
    
        public virtual int INSOBISToSoftversion(Nullable<decimal> oBISID, Nullable<decimal> softversionToDeviceModelID, ObjectParameter result, ObjectParameter errMSG)
        {
            var oBISIDParameter = oBISID.HasValue ?
                new ObjectParameter("OBISID", oBISID) :
                new ObjectParameter("OBISID", typeof(decimal));
    
            var softversionToDeviceModelIDParameter = softversionToDeviceModelID.HasValue ?
                new ObjectParameter("SoftversionToDeviceModelID", softversionToDeviceModelID) :
                new ObjectParameter("SoftversionToDeviceModelID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSOBISToSoftversion", oBISIDParameter, softversionToDeviceModelIDParameter, result, errMSG);
        }
    
        public virtual int InsOBISToWindow(Nullable<decimal> oBISID, Nullable<int> windowID, ObjectParameter result, ObjectParameter errMSG)
        {
            var oBISIDParameter = oBISID.HasValue ?
                new ObjectParameter("OBISID", oBISID) :
                new ObjectParameter("OBISID", typeof(decimal));
    
            var windowIDParameter = windowID.HasValue ?
                new ObjectParameter("WindowID", windowID) :
                new ObjectParameter("WindowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsOBISToWindow", oBISIDParameter, windowIDParameter, result, errMSG);
        }
    
        public virtual int InsOBISTypeToReport(Nullable<int> oBISTypeID, Nullable<decimal> reportID, ObjectParameter result, ObjectParameter errMSG)
        {
            var oBISTypeIDParameter = oBISTypeID.HasValue ?
                new ObjectParameter("OBISTypeID", oBISTypeID) :
                new ObjectParameter("OBISTypeID", typeof(int));
    
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsOBISTypeToReport", oBISTypeIDParameter, reportIDParameter, result, errMSG);
        }
    
        public virtual int INSOBISValueDetail(Nullable<decimal> oBISValueHeaderID, Nullable<decimal> oBISID, string softwareVersion, string value, string vEEValue, string readValuUnitName, ObjectParameter obisValueID, ObjectParameter result, ObjectParameter errMSG)
        {
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            var oBISIDParameter = oBISID.HasValue ?
                new ObjectParameter("OBISID", oBISID) :
                new ObjectParameter("OBISID", typeof(decimal));
    
            var softwareVersionParameter = softwareVersion != null ?
                new ObjectParameter("SoftwareVersion", softwareVersion) :
                new ObjectParameter("SoftwareVersion", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var vEEValueParameter = vEEValue != null ?
                new ObjectParameter("VEEValue", vEEValue) :
                new ObjectParameter("VEEValue", typeof(string));
    
            var readValuUnitNameParameter = readValuUnitName != null ?
                new ObjectParameter("ReadValuUnitName", readValuUnitName) :
                new ObjectParameter("ReadValuUnitName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSOBISValueDetail", oBISValueHeaderIDParameter, oBISIDParameter, softwareVersionParameter, valueParameter, vEEValueParameter, readValuUnitNameParameter, obisValueID, result, errMSG);
        }
    
        public virtual int INSOBISValueDetailForHHU(Nullable<decimal> oBISValueHeaderID, string oBIScode, string value, string vEEValue, string readValuUnitName, string transferDate, Nullable<decimal> languageID, ObjectParameter obisValueID, ObjectParameter result, ObjectParameter errMSG)
        {
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            var oBIScodeParameter = oBIScode != null ?
                new ObjectParameter("OBIScode", oBIScode) :
                new ObjectParameter("OBIScode", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var vEEValueParameter = vEEValue != null ?
                new ObjectParameter("VEEValue", vEEValue) :
                new ObjectParameter("VEEValue", typeof(string));
    
            var readValuUnitNameParameter = readValuUnitName != null ?
                new ObjectParameter("ReadValuUnitName", readValuUnitName) :
                new ObjectParameter("ReadValuUnitName", typeof(string));
    
            var transferDateParameter = transferDate != null ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(string));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSOBISValueDetailForHHU", oBISValueHeaderIDParameter, oBIScodeParameter, valueParameter, vEEValueParameter, readValuUnitNameParameter, transferDateParameter, languageIDParameter, obisValueID, result, errMSG);
        }
    
        public virtual int INSOBISValueHeader(string readDate, Nullable<decimal> deviceTypeID, Nullable<decimal> userID, string transferDate, Nullable<decimal> meterID, Nullable<decimal> sourceTypeID, ObjectParameter oBISValueHeaderID, ObjectParameter result, ObjectParameter errMSG)
        {
            var readDateParameter = readDate != null ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(string));
    
            var deviceTypeIDParameter = deviceTypeID.HasValue ?
                new ObjectParameter("DeviceTypeID", deviceTypeID) :
                new ObjectParameter("DeviceTypeID", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            var transferDateParameter = transferDate != null ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(string));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var sourceTypeIDParameter = sourceTypeID.HasValue ?
                new ObjectParameter("SourceTypeID", sourceTypeID) :
                new ObjectParameter("SourceTypeID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSOBISValueHeader", readDateParameter, deviceTypeIDParameter, userIDParameter, transferDateParameter, meterIDParameter, sourceTypeIDParameter, oBISValueHeaderID, result, errMSG);
        }
    
        public virtual int INSReadValueFromHHu(Nullable<decimal> oBISValueHeaderID, Nullable<decimal> meterID, string readDate, string transferDate)
        {
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var readDateParameter = readDate != null ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(string));
    
            var transferDateParameter = transferDate != null ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSReadValueFromHHu", oBISValueHeaderIDParameter, meterIDParameter, readDateParameter, transferDateParameter);
        }
    
        public virtual int InsReadValueFromHHUXML(string path, Nullable<decimal> userID, Nullable<decimal> languageID, ObjectParameter result, ObjectParameter errMSG)
        {
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsReadValueFromHHUXML", pathParameter, userIDParameter, languageIDParameter, result, errMSG);
        }
    
        public virtual int INSReports(Nullable<decimal> userID, string reportName, ObjectParameter reportID, ObjectParameter result, ObjectParameter errMSG)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            var reportNameParameter = reportName != null ?
                new ObjectParameter("ReportName", reportName) :
                new ObjectParameter("ReportName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSReports", userIDParameter, reportNameParameter, reportID, result, errMSG);
        }
    
        public virtual int INSSheetInfo(Nullable<int> sheetNumber, string sheetName, ObjectParameter sheetID, ObjectParameter result, ObjectParameter errMSG)
        {
            var sheetNumberParameter = sheetNumber.HasValue ?
                new ObjectParameter("SheetNumber", sheetNumber) :
                new ObjectParameter("SheetNumber", typeof(int));
    
            var sheetNameParameter = sheetName != null ?
                new ObjectParameter("SheetName", sheetName) :
                new ObjectParameter("SheetName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSSheetInfo", sheetNumberParameter, sheetNameParameter, sheetID, result, errMSG);
        }
    
        public virtual int INSSoftversionToDeviceModel(string softversion, Nullable<decimal> deviceModelID, ObjectParameter softversionToDeviceModelID, ObjectParameter result, ObjectParameter errMSG)
        {
            var softversionParameter = softversion != null ?
                new ObjectParameter("Softversion", softversion) :
                new ObjectParameter("Softversion", typeof(string));
    
            var deviceModelIDParameter = deviceModelID.HasValue ?
                new ObjectParameter("DeviceModelID", deviceModelID) :
                new ObjectParameter("DeviceModelID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSSoftversionToDeviceModel", softversionParameter, deviceModelIDParameter, softversionToDeviceModelID, result, errMSG);
        }
    
        public virtual int INSStatusOBISsDesc(Nullable<decimal> oBISID, Nullable<int> bitNumber, string farsiDescForTrue, string latinDescForTrue, string farsiDescForFalse, string latinDescForFalse, ObjectParameter result, ObjectParameter errMSG)
        {
            var oBISIDParameter = oBISID.HasValue ?
                new ObjectParameter("OBISID", oBISID) :
                new ObjectParameter("OBISID", typeof(decimal));
    
            var bitNumberParameter = bitNumber.HasValue ?
                new ObjectParameter("BitNumber", bitNumber) :
                new ObjectParameter("BitNumber", typeof(int));
    
            var farsiDescForTrueParameter = farsiDescForTrue != null ?
                new ObjectParameter("FarsiDescForTrue", farsiDescForTrue) :
                new ObjectParameter("FarsiDescForTrue", typeof(string));
    
            var latinDescForTrueParameter = latinDescForTrue != null ?
                new ObjectParameter("LatinDescForTrue", latinDescForTrue) :
                new ObjectParameter("LatinDescForTrue", typeof(string));
    
            var farsiDescForFalseParameter = farsiDescForFalse != null ?
                new ObjectParameter("FarsiDescForFalse", farsiDescForFalse) :
                new ObjectParameter("FarsiDescForFalse", typeof(string));
    
            var latinDescForFalseParameter = latinDescForFalse != null ?
                new ObjectParameter("LatinDescForFalse", latinDescForFalse) :
                new ObjectParameter("LatinDescForFalse", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSStatusOBISsDesc", oBISIDParameter, bitNumberParameter, farsiDescForTrueParameter, latinDescForTrueParameter, farsiDescForFalseParameter, latinDescForFalseParameter, result, errMSG);
        }
    
        public virtual int InsToken(string uSBDeviceCode, Nullable<decimal> userID, string computerCode, Nullable<int> sequenceNumber, string token, string buildDate, Nullable<decimal> cardID, Nullable<decimal> hash, Nullable<decimal> meterID, string creditTransferModes, string startDateTime, string endDateTime, Nullable<decimal> creditValue, string uSBSignature, Nullable<decimal> oBISValueHeaderID, Nullable<int> credit_Capability_Activation, string creditStartDate, Nullable<int> disconnectivity_On_Negative_Credit, Nullable<int> disconnectivity_On_Expired_Credit, ObjectParameter tokenID, ObjectParameter result, ObjectParameter errMSG)
        {
            var uSBDeviceCodeParameter = uSBDeviceCode != null ?
                new ObjectParameter("USBDeviceCode", uSBDeviceCode) :
                new ObjectParameter("USBDeviceCode", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            var computerCodeParameter = computerCode != null ?
                new ObjectParameter("ComputerCode", computerCode) :
                new ObjectParameter("ComputerCode", typeof(string));
    
            var sequenceNumberParameter = sequenceNumber.HasValue ?
                new ObjectParameter("SequenceNumber", sequenceNumber) :
                new ObjectParameter("SequenceNumber", typeof(int));
    
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var buildDateParameter = buildDate != null ?
                new ObjectParameter("BuildDate", buildDate) :
                new ObjectParameter("BuildDate", typeof(string));
    
            var cardIDParameter = cardID.HasValue ?
                new ObjectParameter("CardID", cardID) :
                new ObjectParameter("CardID", typeof(decimal));
    
            var hashParameter = hash.HasValue ?
                new ObjectParameter("Hash", hash) :
                new ObjectParameter("Hash", typeof(decimal));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var creditTransferModesParameter = creditTransferModes != null ?
                new ObjectParameter("CreditTransferModes", creditTransferModes) :
                new ObjectParameter("CreditTransferModes", typeof(string));
    
            var startDateTimeParameter = startDateTime != null ?
                new ObjectParameter("StartDateTime", startDateTime) :
                new ObjectParameter("StartDateTime", typeof(string));
    
            var endDateTimeParameter = endDateTime != null ?
                new ObjectParameter("EndDateTime", endDateTime) :
                new ObjectParameter("EndDateTime", typeof(string));
    
            var creditValueParameter = creditValue.HasValue ?
                new ObjectParameter("CreditValue", creditValue) :
                new ObjectParameter("CreditValue", typeof(decimal));
    
            var uSBSignatureParameter = uSBSignature != null ?
                new ObjectParameter("USBSignature", uSBSignature) :
                new ObjectParameter("USBSignature", typeof(string));
    
            var oBISValueHeaderIDParameter = oBISValueHeaderID.HasValue ?
                new ObjectParameter("OBISValueHeaderID", oBISValueHeaderID) :
                new ObjectParameter("OBISValueHeaderID", typeof(decimal));
    
            var credit_Capability_ActivationParameter = credit_Capability_Activation.HasValue ?
                new ObjectParameter("credit_Capability_Activation", credit_Capability_Activation) :
                new ObjectParameter("credit_Capability_Activation", typeof(int));
    
            var creditStartDateParameter = creditStartDate != null ?
                new ObjectParameter("creditStartDate", creditStartDate) :
                new ObjectParameter("creditStartDate", typeof(string));
    
            var disconnectivity_On_Negative_CreditParameter = disconnectivity_On_Negative_Credit.HasValue ?
                new ObjectParameter("disconnectivity_On_Negative_Credit", disconnectivity_On_Negative_Credit) :
                new ObjectParameter("disconnectivity_On_Negative_Credit", typeof(int));
    
            var disconnectivity_On_Expired_CreditParameter = disconnectivity_On_Expired_Credit.HasValue ?
                new ObjectParameter("disconnectivity_On_Expired_Credit", disconnectivity_On_Expired_Credit) :
                new ObjectParameter("disconnectivity_On_Expired_Credit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsToken", uSBDeviceCodeParameter, userIDParameter, computerCodeParameter, sequenceNumberParameter, tokenParameter, buildDateParameter, cardIDParameter, hashParameter, meterIDParameter, creditTransferModesParameter, startDateTimeParameter, endDateTimeParameter, creditValueParameter, uSBSignatureParameter, oBISValueHeaderIDParameter, credit_Capability_ActivationParameter, creditStartDateParameter, disconnectivity_On_Negative_CreditParameter, disconnectivity_On_Expired_CreditParameter, tokenID, result, errMSG);
        }
    
        public virtual int INSTokenFromDangle(Nullable<int> currentYear, Nullable<int> dayNumber, Nullable<int> minuteOfDay, Nullable<decimal> systemID, Nullable<int> sequenceNumber, string tokenID, Nullable<decimal> meterID, ObjectParameter tokenFromDongleID, ObjectParameter result, ObjectParameter errMSG)
        {
            var currentYearParameter = currentYear.HasValue ?
                new ObjectParameter("CurrentYear", currentYear) :
                new ObjectParameter("CurrentYear", typeof(int));
    
            var dayNumberParameter = dayNumber.HasValue ?
                new ObjectParameter("DayNumber", dayNumber) :
                new ObjectParameter("DayNumber", typeof(int));
    
            var minuteOfDayParameter = minuteOfDay.HasValue ?
                new ObjectParameter("MinuteOfDay", minuteOfDay) :
                new ObjectParameter("MinuteOfDay", typeof(int));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(decimal));
    
            var sequenceNumberParameter = sequenceNumber.HasValue ?
                new ObjectParameter("SequenceNumber", sequenceNumber) :
                new ObjectParameter("SequenceNumber", typeof(int));
    
            var tokenIDParameter = tokenID != null ?
                new ObjectParameter("TokenID", tokenID) :
                new ObjectParameter("TokenID", typeof(string));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSTokenFromDangle", currentYearParameter, dayNumberParameter, minuteOfDayParameter, systemIDParameter, sequenceNumberParameter, tokenIDParameter, meterIDParameter, tokenFromDongleID, result, errMSG);
        }
    
        public virtual int InsUsers(string userName, string userPass, ObjectParameter userID, ObjectParameter result, ObjectParameter errMSG)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userPassParameter = userPass != null ?
                new ObjectParameter("UserPass", userPass) :
                new ObjectParameter("UserPass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsUsers", userNameParameter, userPassParameter, userID, result, errMSG);
        }
    
        public virtual int InsUserToGroup(Nullable<decimal> groupID, Nullable<decimal> userID, Nullable<bool> valid, Nullable<int> groupType, ObjectParameter result, ObjectParameter errMSG)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            var validParameter = valid.HasValue ?
                new ObjectParameter("Valid", valid) :
                new ObjectParameter("Valid", typeof(bool));
    
            var groupTypeParameter = groupType.HasValue ?
                new ObjectParameter("GroupType", groupType) :
                new ObjectParameter("GroupType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsUserToGroup", groupIDParameter, userIDParameter, validParameter, groupTypeParameter, result, errMSG);
        }
    
        public virtual int RemoveOldMeterNo(ObjectParameter errmsg)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveOldMeterNo", errmsg);
        }
    
        public virtual int RestoreDatabase(string dBName, string dBAddress, ObjectParameter result, ObjectParameter errMsg)
        {
            var dBNameParameter = dBName != null ?
                new ObjectParameter("DBName", dBName) :
                new ObjectParameter("DBName", typeof(string));
    
            var dBAddressParameter = dBAddress != null ?
                new ObjectParameter("DBAddress", dBAddress) :
                new ObjectParameter("DBAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RestoreDatabase", dBNameParameter, dBAddressParameter, result, errMsg);
        }
    
        public virtual int serializexml()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("serializexml");
        }
    
        public virtual ObjectResult<ShowALLCardsTOMeters_Result> ShowALLCardsTOMeters(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowALLCardsTOMeters_Result>("ShowALLCardsTOMeters", filterParameter);
        }
    
        public virtual ObjectResult<ShowAllCreditTokenWithNecessary_Result> ShowAllCreditTokenWithNecessary(string fromDate, string toDate, Nullable<decimal> userID, Nullable<decimal> groupID, Nullable<decimal> groupType, Nullable<bool> isNecessary, Nullable<bool> withCredit, Nullable<bool> type, Nullable<decimal> languageID)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(decimal));
    
            var groupTypeParameter = groupType.HasValue ?
                new ObjectParameter("GroupType", groupType) :
                new ObjectParameter("GroupType", typeof(decimal));
    
            var isNecessaryParameter = isNecessary.HasValue ?
                new ObjectParameter("IsNecessary", isNecessary) :
                new ObjectParameter("IsNecessary", typeof(bool));
    
            var withCreditParameter = withCredit.HasValue ?
                new ObjectParameter("WithCredit", withCredit) :
                new ObjectParameter("WithCredit", typeof(bool));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(bool));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowAllCreditTokenWithNecessary_Result>("ShowAllCreditTokenWithNecessary", fromDateParameter, toDateParameter, userIDParameter, groupIDParameter, groupTypeParameter, isNecessaryParameter, withCreditParameter, typeParameter, languageIDParameter);
        }
    
        public virtual ObjectResult<ShowAreas_Result> ShowAreas(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowAreas_Result>("ShowAreas", filterParameter);
        }
    
        public virtual ObjectResult<ShowButtonAccess_Result> ShowButtonAccess(string filter, string otherFilter, Nullable<decimal> languageID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var otherFilterParameter = otherFilter != null ?
                new ObjectParameter("OtherFilter", otherFilter) :
                new ObjectParameter("OtherFilter", typeof(string));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("languageID", languageID) :
                new ObjectParameter("languageID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowButtonAccess_Result>("ShowButtonAccess", filterParameter, otherFilterParameter, languageIDParameter);
        }
    
        public virtual ObjectResult<ShowCardTOMeter_Result> ShowCardTOMeter(string filter, string otherFilter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var otherFilterParameter = otherFilter != null ?
                new ObjectParameter("OtherFilter", otherFilter) :
                new ObjectParameter("OtherFilter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowCardTOMeter_Result>("ShowCardTOMeter", filterParameter, otherFilterParameter);
        }
    
        public virtual ObjectResult<ShowCatchments_Result> ShowCatchments(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowCatchments_Result>("ShowCatchments", filterParameter);
        }
    
        public virtual ObjectResult<ShowChangeDB_Result> ShowChangeDB(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowChangeDB_Result>("ShowChangeDB", filterParameter);
        }
    
        public virtual ObjectResult<ShowCities_Result> ShowCities(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowCities_Result>("ShowCities", filterParameter);
        }
    
        public virtual int ShowClockOBISValue(string value, Nullable<decimal> meterID, ObjectParameter oBISValueHeaderID, ObjectParameter result)
        {
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ShowClockOBISValue", valueParameter, meterIDParameter, oBISValueHeaderID, result);
        }
    
        public virtual ObjectResult<ShowConsumedActiveEnergy_Result> ShowConsumedActiveEnergy(string filter, Nullable<decimal> langID, Nullable<decimal> userID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var langIDParameter = langID.HasValue ?
                new ObjectParameter("LangID", langID) :
                new ObjectParameter("LangID", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowConsumedActiveEnergy_Result>("ShowConsumedActiveEnergy", filterParameter, langIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<ShowConsumedactiveenergypivot_Result> ShowConsumedactiveenergypivot(string filter, Nullable<decimal> userID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowConsumedactiveenergypivot_Result>("ShowConsumedactiveenergypivot", filterParameter, userIDParameter);
        }
    
        public virtual ObjectResult<ShowConsumedatariffctiveenergypivot_Result> ShowConsumedatariffctiveenergypivot(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowConsumedatariffctiveenergypivot_Result>("ShowConsumedatariffctiveenergypivot", filterParameter);
        }
    
        public virtual ObjectResult<ShowConsumedWater_Result> ShowConsumedWater(string filter, Nullable<decimal> langID, Nullable<decimal> userID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var langIDParameter = langID.HasValue ?
                new ObjectParameter("LangID", langID) :
                new ObjectParameter("LangID", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowConsumedWater_Result>("ShowConsumedWater", filterParameter, langIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<ShowConsumedWater207_Result> ShowConsumedWater207(Nullable<decimal> meterId, Nullable<decimal> languageID)
        {
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(decimal));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("languageID", languageID) :
                new ObjectParameter("languageID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowConsumedWater207_Result>("ShowConsumedWater207", meterIdParameter, languageIDParameter);
        }
    
        public virtual ObjectResult<ShowConsumedwaterColumnHeader207_Result> ShowConsumedwaterColumnHeader207(Nullable<decimal> meterId, string readDate)
        {
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(decimal));
    
            var readDateParameter = readDate != null ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowConsumedwaterColumnHeader207_Result>("ShowConsumedwaterColumnHeader207", meterIdParameter, readDateParameter);
        }
    
        public virtual ObjectResult<ShowConsumedwaterDetail207_Result> ShowConsumedwaterDetail207(Nullable<decimal> meterId, string readDate)
        {
            var meterIdParameter = meterId.HasValue ?
                new ObjectParameter("MeterId", meterId) :
                new ObjectParameter("MeterId", typeof(decimal));
    
            var readDateParameter = readDate != null ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowConsumedwaterDetail207_Result>("ShowConsumedwaterDetail207", meterIdParameter, readDateParameter);
        }
    
        public virtual ObjectResult<ShowConsumedWaterForVee_Result> ShowConsumedWaterForVee(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowConsumedWaterForVee_Result>("ShowConsumedWaterForVee", filterParameter);
        }
    
        public virtual ObjectResult<ShowConsumedWaterPivot_Result> ShowConsumedWaterPivot(string filter, string managementFilter, Nullable<decimal> userID, Nullable<decimal> languageID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var managementFilterParameter = managementFilter != null ?
                new ObjectParameter("ManagementFilter", managementFilter) :
                new ObjectParameter("ManagementFilter", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowConsumedWaterPivot_Result>("ShowConsumedWaterPivot", filterParameter, managementFilterParameter, userIDParameter, languageIDParameter);
        }
    
        public virtual ObjectResult<ShowCountries_Result> ShowCountries(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowCountries_Result>("ShowCountries", filterParameter);
        }
    
        public virtual ObjectResult<ShowCredit303_Result> ShowCredit303(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowCredit303_Result>("ShowCredit303", filterParameter);
        }
    
        public virtual ObjectResult<ShowCurve_Result> ShowCurve(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowCurve_Result>("ShowCurve", filterParameter);
        }
    
        public virtual int ShowCustomerIDGroupID(Nullable<decimal> meterID, Nullable<decimal> userID, ObjectParameter iSAllow, ObjectParameter customerID, ObjectParameter groupID, ObjectParameter result, ObjectParameter errMSG)
        {
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ShowCustomerIDGroupID", meterIDParameter, userIDParameter, iSAllow, customerID, groupID, result, errMSG);
        }
    
        public virtual ObjectResult<ShowCustomerReport_Result> ShowCustomerReport(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowCustomerReport_Result>("ShowCustomerReport", filterParameter);
        }
    
        public virtual ObjectResult<ShowCustomers_Result> ShowCustomers(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowCustomers_Result>("ShowCustomers", filterParameter);
        }
    
        public virtual ObjectResult<ShowDangelInfo_Result> ShowDangelInfo(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowDangelInfo_Result>("ShowDangelInfo", filterParameter);
        }
    
        public virtual ObjectResult<ShowDataBasesInfo_Result> ShowDataBasesInfo(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowDataBasesInfo_Result>("ShowDataBasesInfo", filterParameter);
        }
    
        public virtual ObjectResult<ShowDeviceModel_Result> ShowDeviceModel(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowDeviceModel_Result>("ShowDeviceModel", filterParameter);
        }
    
        public virtual ObjectResult<ShowDeviceModelandSoftversion_Result> ShowDeviceModelandSoftversion(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowDeviceModelandSoftversion_Result>("ShowDeviceModelandSoftversion", filterParameter);
        }
    
        public virtual ObjectResult<ShowDeviceType_Result> ShowDeviceType(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowDeviceType_Result>("ShowDeviceType", filterParameter);
        }
    
        public virtual ObjectResult<ShowDiatinctOBISs_Result> ShowDiatinctOBISs(string filter, Nullable<decimal> languageID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowDiatinctOBISs_Result>("ShowDiatinctOBISs", filterParameter, languageIDParameter);
        }
    
        public virtual ObjectResult<ShowEOffice_Result> ShowEOffice(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowEOffice_Result>("ShowEOffice", filterParameter);
        }
    
        public virtual ObjectResult<showErrorControlReport_Result> showErrorControlReport(string filter, Nullable<decimal> userID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<showErrorControlReport_Result>("showErrorControlReport", filterParameter, userIDParameter);
        }
    
        public virtual ObjectResult<showErrorControlReportNew_Result> showErrorControlReportNew(string filter, string filter2, Nullable<decimal> userID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var filter2Parameter = filter2 != null ?
                new ObjectParameter("Filter2", filter2) :
                new ObjectParameter("Filter2", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<showErrorControlReportNew_Result>("showErrorControlReportNew", filterParameter, filter2Parameter, userIDParameter);
        }
    
        public virtual ObjectResult<ShowESubOffice_Result> ShowESubOffice(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowESubOffice_Result>("ShowESubOffice", filterParameter);
        }
    
        public virtual ObjectResult<showFilterforNominalDemandReport_Result> showFilterforNominalDemandReport(Nullable<decimal> languageID)
        {
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<showFilterforNominalDemandReport_Result>("showFilterforNominalDemandReport", languageIDParameter);
        }
    
        public virtual ObjectResult<ShowGroups_Result> ShowGroups(string filter, Nullable<int> type, Nullable<decimal> languageID, Nullable<decimal> userID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowGroups_Result>("ShowGroups", filterParameter, typeParameter, languageIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<ShowHashToGroup_Result> ShowHashToGroup(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowHashToGroup_Result>("ShowHashToGroup", filterParameter);
        }
    
        public virtual ObjectResult<ShowLanguage_Result> ShowLanguage(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowLanguage_Result>("ShowLanguage", filterParameter);
        }
    
        public virtual ObjectResult<ShowLocations_Result> ShowLocations(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowLocations_Result>("ShowLocations", filterParameter);
        }
    
        public virtual ObjectResult<ShowManagmentConsumedactiveenergypivot_Result> ShowManagmentConsumedactiveenergypivot(string filter, Nullable<decimal> userID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowManagmentConsumedactiveenergypivot_Result>("ShowManagmentConsumedactiveenergypivot", filterParameter, userIDParameter);
        }
    
        public virtual ObjectResult<ShowManagmentConsumedWaterPivot_Result> ShowManagmentConsumedWaterPivot(string filter, string managementFilter, Nullable<decimal> userID, Nullable<decimal> languageID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var managementFilterParameter = managementFilter != null ?
                new ObjectParameter("ManagementFilter", managementFilter) :
                new ObjectParameter("ManagementFilter", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowManagmentConsumedWaterPivot_Result>("ShowManagmentConsumedWaterPivot", filterParameter, managementFilterParameter, userIDParameter, languageIDParameter);
        }
    
        public virtual ObjectResult<string> ShowManufacturerName(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ShowManufacturerName", filterParameter);
        }
    
        public virtual int ShowMaxReadDate(Nullable<decimal> meterID, ObjectParameter maxReadDate)
        {
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ShowMaxReadDate", meterIDParameter, maxReadDate);
        }
    
        public virtual int showMaxSequenceNumber(Nullable<decimal> meterID, ObjectParameter maxSequenceNumber, ObjectParameter result, ObjectParameter errMSG)
        {
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("showMaxSequenceNumber", meterIDParameter, maxSequenceNumber, result, errMSG);
        }
    
        public virtual ObjectResult<ShowMessageText_Result> ShowMessageText(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowMessageText_Result>("ShowMessageText", filterParameter);
        }
    
        public virtual ObjectResult<ShowMeter_Result> ShowMeter(string filter, Nullable<decimal> userID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowMeter_Result>("ShowMeter", filterParameter, userIDParameter);
        }
    
        public virtual int ShowMeterForVEE(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ShowMeterForVEE", filterParameter);
        }
    
        public virtual int ShowMeterNumber(string meterNumber, ObjectParameter isExits, ObjectParameter result, ObjectParameter errMSG)
        {
            var meterNumberParameter = meterNumber != null ?
                new ObjectParameter("MeterNumber", meterNumber) :
                new ObjectParameter("MeterNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ShowMeterNumber", meterNumberParameter, isExits, result, errMSG);
        }
    
        public virtual int ShowMeterNumberIssuance(string meterNumber, Nullable<decimal> userID, ObjectParameter isExits, ObjectParameter isAllow, ObjectParameter result, ObjectParameter errMSG)
        {
            var meterNumberParameter = meterNumber != null ?
                new ObjectParameter("MeterNumber", meterNumber) :
                new ObjectParameter("MeterNumber", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ShowMeterNumberIssuance", meterNumberParameter, userIDParameter, isExits, isAllow, result, errMSG);
        }
    
        public virtual ObjectResult<ShowMeterToCustomer_Result> ShowMeterToCustomer(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowMeterToCustomer_Result>("ShowMeterToCustomer", filterParameter);
        }
    
        public virtual ObjectResult<ShowMeterToGroup_Result> ShowMeterToGroup(string fILTER, Nullable<decimal> groupID, Nullable<decimal> userID)
        {
            var fILTERParameter = fILTER != null ?
                new ObjectParameter("FILTER", fILTER) :
                new ObjectParameter("FILTER", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowMeterToGroup_Result>("ShowMeterToGroup", fILTERParameter, groupIDParameter, userIDParameter);
        }
    
        public virtual int ShowMinReadDate(Nullable<decimal> meterID, ObjectParameter minReadDate)
        {
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ShowMinReadDate", meterIDParameter, minReadDate);
        }
    
        public virtual ObjectResult<ShowModem_Result> ShowModem(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowModem_Result>("ShowModem", filterParameter);
        }
    
        public virtual int ShowModemType(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ShowModemType", filterParameter);
        }
    
        public virtual ObjectResult<ShowNegativeCredit_Result> ShowNegativeCredit(string filter, Nullable<decimal> userID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowNegativeCredit_Result>("ShowNegativeCredit", filterParameter, userIDParameter);
        }
    
        public virtual ObjectResult<ShowNominalDemandViolation_Result> ShowNominalDemandViolation(string filter, Nullable<decimal> userID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowNominalDemandViolation_Result>("ShowNominalDemandViolation", filterParameter, userIDParameter);
        }
    
        public virtual ObjectResult<ShowOBISs_Result> ShowOBISs(string filter, Nullable<decimal> languageID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowOBISs_Result>("ShowOBISs", filterParameter, languageIDParameter);
        }
    
        public virtual ObjectResult<ShowOBISsDesc_Result> ShowOBISsDesc(string filter, Nullable<decimal> languageID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowOBISsDesc_Result>("ShowOBISsDesc", filterParameter, languageIDParameter);
        }
    
        public virtual ObjectResult<ShowOBISToExcel_Result> ShowOBISToExcel(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowOBISToExcel_Result>("ShowOBISToExcel", filterParameter);
        }
    
        public virtual ObjectResult<ShowOBISToReport_Result> ShowOBISToReport(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowOBISToReport_Result>("ShowOBISToReport", filterParameter);
        }
    
        public virtual int ShowOBISToSoftversion(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ShowOBISToSoftversion", filterParameter);
        }
    
        public virtual int ShowOBISToWindow(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ShowOBISToWindow", filterParameter);
        }
    
        public virtual ObjectResult<ShowOBISType_Result> ShowOBISType(string filter, Nullable<decimal> languageID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowOBISType_Result>("ShowOBISType", filterParameter, languageIDParameter);
        }
    
        public virtual ObjectResult<ShowOBISTypeToReport_Result> ShowOBISTypeToReport(string filter, Nullable<decimal> languageID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowOBISTypeToReport_Result>("ShowOBISTypeToReport", filterParameter, languageIDParameter);
        }
    
        public virtual ObjectResult<ShowOBISUnits_Result> ShowOBISUnits(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowOBISUnits_Result>("ShowOBISUnits", filterParameter);
        }
    
        public virtual ObjectResult<ShowOBISValueDetail_Result> ShowOBISValueDetail(string filter, Nullable<decimal> languageID, Nullable<decimal> userID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowOBISValueDetail_Result>("ShowOBISValueDetail", filterParameter, languageIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<ShowOBISValueHeader_Result> ShowOBISValueHeader(string filter, Nullable<decimal> userID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowOBISValueHeader_Result>("ShowOBISValueHeader", filterParameter, userIDParameter);
        }
    
        public virtual ObjectResult<ShowOffice_Result> ShowOffice(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowOffice_Result>("ShowOffice", filterParameter);
        }
    
        public virtual ObjectResult<ShowPlains_Result> ShowPlains(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowPlains_Result>("ShowPlains", filterParameter);
        }
    
        public virtual ObjectResult<ShowProvinces_Result> ShowProvinces(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowProvinces_Result>("ShowProvinces", filterParameter);
        }
    
        public virtual ObjectResult<ShowReportOBISValueDetails_Result> ShowReportOBISValueDetails(string filter, Nullable<decimal> languageID, Nullable<decimal> userID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowReportOBISValueDetails_Result>("ShowReportOBISValueDetails", filterParameter, languageIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<ShowReports_Result> ShowReports(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowReports_Result>("ShowReports", filterParameter);
        }
    
        public virtual ObjectResult<ShowSoftversionToDeviceModel_Result> ShowSoftversionToDeviceModel(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowSoftversionToDeviceModel_Result>("ShowSoftversionToDeviceModel", filterParameter);
        }
    
        public virtual int showStatusOBISsDesc(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("showStatusOBISsDesc", filterParameter);
        }
    
        public virtual int showStatusOBISsFarsiDescForFalse(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("showStatusOBISsFarsiDescForFalse", filterParameter);
        }
    
        public virtual int showStatusOBISsLatinDescForFalse(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("showStatusOBISsLatinDescForFalse", filterParameter);
        }
    
        public virtual int showStatusOBISsLatinDescForTrue(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("showStatusOBISsLatinDescForTrue", filterParameter);
        }
    
        public virtual ObjectResult<ShowSubOffice_Result> ShowSubOffice(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowSubOffice_Result>("ShowSubOffice", filterParameter);
        }
    
        public virtual ObjectResult<ShowToken_Result> ShowToken(string filter, Nullable<decimal> languageID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowToken_Result>("ShowToken", filterParameter, languageIDParameter);
        }
    
        public virtual int ShowTokenFromDangle(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ShowTokenFromDangle", filterParameter);
        }
    
        public virtual ObjectResult<ShowTranslateofLable_Result> ShowTranslateofLable(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowTranslateofLable_Result>("ShowTranslateofLable", filterParameter);
        }
    
        public virtual ObjectResult<ShowTranslateofMessage_Result> ShowTranslateofMessage(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowTranslateofMessage_Result>("ShowTranslateofMessage", filterParameter);
        }
    
        public virtual ObjectResult<ShowUsers_Result> ShowUsers(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowUsers_Result>("ShowUsers", filterParameter);
        }
    
        public virtual ObjectResult<ShowUserToGroup_Result> ShowUserToGroup(string filter, Nullable<decimal> userID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowUserToGroup_Result>("ShowUserToGroup", filterParameter, userIDParameter);
        }
    
        public virtual ObjectResult<ShowVEEConsumedWaterForVEE_Result> ShowVEEConsumedWaterForVEE(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowVEEConsumedWaterForVEE_Result>("ShowVEEConsumedWaterForVEE", filterParameter);
        }
    
        public virtual ObjectResult<ShowVEEValue_Result> ShowVEEValue(string filter)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowVEEValue_Result>("ShowVEEValue", filterParameter);
        }
    
        public virtual ObjectResult<ShowWindows_Result> ShowWindows(string filter, Nullable<decimal> languageID)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowWindows_Result>("ShowWindows", filterParameter, languageIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_BackupDatabases(string databaseName, string backupType, string backupLocation)
        {
            var databaseNameParameter = databaseName != null ?
                new ObjectParameter("databaseName", databaseName) :
                new ObjectParameter("databaseName", typeof(string));
    
            var backupTypeParameter = backupType != null ?
                new ObjectParameter("backupType", backupType) :
                new ObjectParameter("backupType", typeof(string));
    
            var backupLocationParameter = backupLocation != null ?
                new ObjectParameter("backupLocation", backupLocation) :
                new ObjectParameter("backupLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BackupDatabases", databaseNameParameter, backupTypeParameter, backupLocationParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateConsumedwSmartcardReader(ObjectParameter result, ObjectParameter errMSG)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateConsumedwSmartcardReader", result, errMSG);
        }
    
        public virtual int UPDConsumedWater(Nullable<decimal> meterID, string consumedWater, string vEEConsumedWater, string vEEMaxFlow, string totalConsumedWater, string readDate, string consumedOBIS, string flowOBIS, string errorMessage, ObjectParameter result, ObjectParameter errMSG)
        {
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var consumedWaterParameter = consumedWater != null ?
                new ObjectParameter("ConsumedWater", consumedWater) :
                new ObjectParameter("ConsumedWater", typeof(string));
    
            var vEEConsumedWaterParameter = vEEConsumedWater != null ?
                new ObjectParameter("VEEConsumedWater", vEEConsumedWater) :
                new ObjectParameter("VEEConsumedWater", typeof(string));
    
            var vEEMaxFlowParameter = vEEMaxFlow != null ?
                new ObjectParameter("VEEMaxFlow", vEEMaxFlow) :
                new ObjectParameter("VEEMaxFlow", typeof(string));
    
            var totalConsumedWaterParameter = totalConsumedWater != null ?
                new ObjectParameter("TotalConsumedWater", totalConsumedWater) :
                new ObjectParameter("TotalConsumedWater", typeof(string));
    
            var readDateParameter = readDate != null ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(string));
    
            var consumedOBISParameter = consumedOBIS != null ?
                new ObjectParameter("ConsumedOBIS", consumedOBIS) :
                new ObjectParameter("ConsumedOBIS", typeof(string));
    
            var flowOBISParameter = flowOBIS != null ?
                new ObjectParameter("FlowOBIS", flowOBIS) :
                new ObjectParameter("FlowOBIS", typeof(string));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDConsumedWater", meterIDParameter, consumedWaterParameter, vEEConsumedWaterParameter, vEEMaxFlowParameter, totalConsumedWaterParameter, readDateParameter, consumedOBISParameter, flowOBISParameter, errorMessageParameter, result, errMSG);
        }
    
        public virtual int UPDConsumedWaterforVEE(Nullable<decimal> meterID, string readDate, string errorMessage)
        {
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            var readDateParameter = readDate != null ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(string));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDConsumedWaterforVEE", meterIDParameter, readDateParameter, errorMessageParameter);
        }
    
        public virtual int UPDCustomers(string customerName, string customerfamily, string customerTel, string customerAddress, string watersubscriptionNumber, string elecsubscriptionNumber, Nullable<decimal> locationID, Nullable<decimal> nationalCode, string mobileNumber, string longitude, string latitude, string postCode, Nullable<decimal> officeID, Nullable<decimal> eofficeID, Nullable<decimal> wSubofficeID, Nullable<decimal> eSubofficeID, string dossierNumber, string flowindossier, string diameterofpipe, string welldepth, string wellLicense, string wellAddress, string fatherName, Nullable<int> typeOfUse, Nullable<decimal> customerID, ObjectParameter result, ObjectParameter errMSG)
        {
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerfamilyParameter = customerfamily != null ?
                new ObjectParameter("Customerfamily", customerfamily) :
                new ObjectParameter("Customerfamily", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var watersubscriptionNumberParameter = watersubscriptionNumber != null ?
                new ObjectParameter("WatersubscriptionNumber", watersubscriptionNumber) :
                new ObjectParameter("WatersubscriptionNumber", typeof(string));
    
            var elecsubscriptionNumberParameter = elecsubscriptionNumber != null ?
                new ObjectParameter("ElecsubscriptionNumber", elecsubscriptionNumber) :
                new ObjectParameter("ElecsubscriptionNumber", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(decimal));
    
            var nationalCodeParameter = nationalCode.HasValue ?
                new ObjectParameter("NationalCode", nationalCode) :
                new ObjectParameter("NationalCode", typeof(decimal));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var postCodeParameter = postCode != null ?
                new ObjectParameter("PostCode", postCode) :
                new ObjectParameter("PostCode", typeof(string));
    
            var officeIDParameter = officeID.HasValue ?
                new ObjectParameter("officeID", officeID) :
                new ObjectParameter("officeID", typeof(decimal));
    
            var eofficeIDParameter = eofficeID.HasValue ?
                new ObjectParameter("EofficeID", eofficeID) :
                new ObjectParameter("EofficeID", typeof(decimal));
    
            var wSubofficeIDParameter = wSubofficeID.HasValue ?
                new ObjectParameter("WSubofficeID", wSubofficeID) :
                new ObjectParameter("WSubofficeID", typeof(decimal));
    
            var eSubofficeIDParameter = eSubofficeID.HasValue ?
                new ObjectParameter("ESubofficeID", eSubofficeID) :
                new ObjectParameter("ESubofficeID", typeof(decimal));
    
            var dossierNumberParameter = dossierNumber != null ?
                new ObjectParameter("DossierNumber", dossierNumber) :
                new ObjectParameter("DossierNumber", typeof(string));
    
            var flowindossierParameter = flowindossier != null ?
                new ObjectParameter("Flowindossier", flowindossier) :
                new ObjectParameter("Flowindossier", typeof(string));
    
            var diameterofpipeParameter = diameterofpipe != null ?
                new ObjectParameter("Diameterofpipe", diameterofpipe) :
                new ObjectParameter("Diameterofpipe", typeof(string));
    
            var welldepthParameter = welldepth != null ?
                new ObjectParameter("Welldepth", welldepth) :
                new ObjectParameter("Welldepth", typeof(string));
    
            var wellLicenseParameter = wellLicense != null ?
                new ObjectParameter("WellLicense", wellLicense) :
                new ObjectParameter("WellLicense", typeof(string));
    
            var wellAddressParameter = wellAddress != null ?
                new ObjectParameter("WellAddress", wellAddress) :
                new ObjectParameter("WellAddress", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var typeOfUseParameter = typeOfUse.HasValue ?
                new ObjectParameter("TypeOfUse", typeOfUse) :
                new ObjectParameter("TypeOfUse", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDCustomers", customerNameParameter, customerfamilyParameter, customerTelParameter, customerAddressParameter, watersubscriptionNumberParameter, elecsubscriptionNumberParameter, locationIDParameter, nationalCodeParameter, mobileNumberParameter, longitudeParameter, latitudeParameter, postCodeParameter, officeIDParameter, eofficeIDParameter, wSubofficeIDParameter, eSubofficeIDParameter, dossierNumberParameter, flowindossierParameter, diameterofpipeParameter, welldepthParameter, wellLicenseParameter, wellAddressParameter, fatherNameParameter, typeOfUseParameter, customerIDParameter, result, errMSG);
        }
    
        public virtual int UPDDeviceModel(string deviceModelName, string manufacturerName, Nullable<decimal> deviceTypeID, Nullable<decimal> deviceModelID, ObjectParameter result, ObjectParameter errMSG)
        {
            var deviceModelNameParameter = deviceModelName != null ?
                new ObjectParameter("DeviceModelName", deviceModelName) :
                new ObjectParameter("DeviceModelName", typeof(string));
    
            var manufacturerNameParameter = manufacturerName != null ?
                new ObjectParameter("ManufacturerName", manufacturerName) :
                new ObjectParameter("ManufacturerName", typeof(string));
    
            var deviceTypeIDParameter = deviceTypeID.HasValue ?
                new ObjectParameter("DeviceTypeID", deviceTypeID) :
                new ObjectParameter("DeviceTypeID", typeof(decimal));
    
            var deviceModelIDParameter = deviceModelID.HasValue ?
                new ObjectParameter("DeviceModelID", deviceModelID) :
                new ObjectParameter("DeviceModelID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDDeviceModel", deviceModelNameParameter, manufacturerNameParameter, deviceTypeIDParameter, deviceModelIDParameter, result, errMSG);
        }
    
        public virtual int UPDGroups(string groupName, string hashValue, Nullable<decimal> groupID, ObjectParameter result, ObjectParameter errMSG)
        {
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var hashValueParameter = hashValue != null ?
                new ObjectParameter("HashValue", hashValue) :
                new ObjectParameter("HashValue", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDGroups", groupNameParameter, hashValueParameter, groupIDParameter, result, errMSG);
        }
    
        public virtual int UPDMeter(string meterNumber, Nullable<decimal> deviceModelID, Nullable<bool> isDirect, Nullable<decimal> softversionToDeviceModelID, Nullable<decimal> modemID, Nullable<decimal> customerID, Nullable<bool> valid, Nullable<decimal> locationID, Nullable<decimal> meterID, ObjectParameter errMSG, ObjectParameter result)
        {
            var meterNumberParameter = meterNumber != null ?
                new ObjectParameter("MeterNumber", meterNumber) :
                new ObjectParameter("MeterNumber", typeof(string));
    
            var deviceModelIDParameter = deviceModelID.HasValue ?
                new ObjectParameter("DeviceModelID", deviceModelID) :
                new ObjectParameter("DeviceModelID", typeof(decimal));
    
            var isDirectParameter = isDirect.HasValue ?
                new ObjectParameter("IsDirect", isDirect) :
                new ObjectParameter("IsDirect", typeof(bool));
    
            var softversionToDeviceModelIDParameter = softversionToDeviceModelID.HasValue ?
                new ObjectParameter("SoftversionToDeviceModelID", softversionToDeviceModelID) :
                new ObjectParameter("SoftversionToDeviceModelID", typeof(decimal));
    
            var modemIDParameter = modemID.HasValue ?
                new ObjectParameter("ModemID", modemID) :
                new ObjectParameter("ModemID", typeof(decimal));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(decimal));
    
            var validParameter = valid.HasValue ?
                new ObjectParameter("Valid", valid) :
                new ObjectParameter("Valid", typeof(bool));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(decimal));
    
            var meterIDParameter = meterID.HasValue ?
                new ObjectParameter("MeterID", meterID) :
                new ObjectParameter("MeterID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDMeter", meterNumberParameter, deviceModelIDParameter, isDirectParameter, softversionToDeviceModelIDParameter, modemIDParameter, customerIDParameter, validParameter, locationIDParameter, meterIDParameter, errMSG, result);
        }
    
        public virtual int UPDMODEM(string modemNumber, string simNumber, Nullable<decimal> softversionToDeviceModelID, Nullable<decimal> deviceModelID, Nullable<decimal> modemID, ObjectParameter result, ObjectParameter errMSG)
        {
            var modemNumberParameter = modemNumber != null ?
                new ObjectParameter("ModemNumber", modemNumber) :
                new ObjectParameter("ModemNumber", typeof(string));
    
            var simNumberParameter = simNumber != null ?
                new ObjectParameter("SimNumber", simNumber) :
                new ObjectParameter("SimNumber", typeof(string));
    
            var softversionToDeviceModelIDParameter = softversionToDeviceModelID.HasValue ?
                new ObjectParameter("SoftversionToDeviceModelID", softversionToDeviceModelID) :
                new ObjectParameter("SoftversionToDeviceModelID", typeof(decimal));
    
            var deviceModelIDParameter = deviceModelID.HasValue ?
                new ObjectParameter("DeviceModelID", deviceModelID) :
                new ObjectParameter("DeviceModelID", typeof(decimal));
    
            var modemIDParameter = modemID.HasValue ?
                new ObjectParameter("ModemID", modemID) :
                new ObjectParameter("ModemID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDMODEM", modemNumberParameter, simNumberParameter, softversionToDeviceModelIDParameter, deviceModelIDParameter, modemIDParameter, result, errMSG);
        }
    
        public virtual int UPDOBISs(string obisCode, string obis, string obisFarsiDesc, string obisLatinDesc, string obisArabicDesc, Nullable<decimal> deviceTypeID, string oBISUnitDesc, Nullable<decimal> obisTypeID, string format, Nullable<int> classID, string cardFormatType, string hHuFormatType, Nullable<decimal> oBISID, Nullable<decimal> unitIDForshow, ObjectParameter result, ObjectParameter errMSG)
        {
            var obisCodeParameter = obisCode != null ?
                new ObjectParameter("ObisCode", obisCode) :
                new ObjectParameter("ObisCode", typeof(string));
    
            var obisParameter = obis != null ?
                new ObjectParameter("Obis", obis) :
                new ObjectParameter("Obis", typeof(string));
    
            var obisFarsiDescParameter = obisFarsiDesc != null ?
                new ObjectParameter("ObisFarsiDesc", obisFarsiDesc) :
                new ObjectParameter("ObisFarsiDesc", typeof(string));
    
            var obisLatinDescParameter = obisLatinDesc != null ?
                new ObjectParameter("ObisLatinDesc", obisLatinDesc) :
                new ObjectParameter("ObisLatinDesc", typeof(string));
    
            var obisArabicDescParameter = obisArabicDesc != null ?
                new ObjectParameter("ObisArabicDesc", obisArabicDesc) :
                new ObjectParameter("ObisArabicDesc", typeof(string));
    
            var deviceTypeIDParameter = deviceTypeID.HasValue ?
                new ObjectParameter("DeviceTypeID", deviceTypeID) :
                new ObjectParameter("DeviceTypeID", typeof(decimal));
    
            var oBISUnitDescParameter = oBISUnitDesc != null ?
                new ObjectParameter("OBISUnitDesc", oBISUnitDesc) :
                new ObjectParameter("OBISUnitDesc", typeof(string));
    
            var obisTypeIDParameter = obisTypeID.HasValue ?
                new ObjectParameter("ObisTypeID", obisTypeID) :
                new ObjectParameter("ObisTypeID", typeof(decimal));
    
            var formatParameter = format != null ?
                new ObjectParameter("Format", format) :
                new ObjectParameter("Format", typeof(string));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var cardFormatTypeParameter = cardFormatType != null ?
                new ObjectParameter("CardFormatType", cardFormatType) :
                new ObjectParameter("CardFormatType", typeof(string));
    
            var hHuFormatTypeParameter = hHuFormatType != null ?
                new ObjectParameter("HHuFormatType", hHuFormatType) :
                new ObjectParameter("HHuFormatType", typeof(string));
    
            var oBISIDParameter = oBISID.HasValue ?
                new ObjectParameter("OBISID", oBISID) :
                new ObjectParameter("OBISID", typeof(decimal));
    
            var unitIDForshowParameter = unitIDForshow.HasValue ?
                new ObjectParameter("UnitIDForshow", unitIDForshow) :
                new ObjectParameter("UnitIDForshow", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDOBISs", obisCodeParameter, obisParameter, obisFarsiDescParameter, obisLatinDescParameter, obisArabicDescParameter, deviceTypeIDParameter, oBISUnitDescParameter, obisTypeIDParameter, formatParameter, classIDParameter, cardFormatTypeParameter, hHuFormatTypeParameter, oBISIDParameter, unitIDForshowParameter, result, errMSG);
        }
    
        public virtual int UPDOBISsType(string type, Nullable<decimal> oBISID, ObjectParameter result, ObjectParameter errMSG)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var oBISIDParameter = oBISID.HasValue ?
                new ObjectParameter("OBISID", oBISID) :
                new ObjectParameter("OBISID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDOBISsType", typeParameter, oBISIDParameter, result, errMSG);
        }
    
        public virtual int UPDReports(string reportName, Nullable<decimal> reportID, ObjectParameter result, ObjectParameter errMSG)
        {
            var reportNameParameter = reportName != null ?
                new ObjectParameter("ReportName", reportName) :
                new ObjectParameter("ReportName", typeof(string));
    
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDReports", reportNameParameter, reportIDParameter, result, errMSG);
        }
    
        public virtual int UPDUser(string userName, string userPass, Nullable<decimal> userID, ObjectParameter result, ObjectParameter errMSG)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userPassParameter = userPass != null ?
                new ObjectParameter("UserPass", userPass) :
                new ObjectParameter("UserPass", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDUser", userNameParameter, userPassParameter, userIDParameter, result, errMSG);
        }
    }
}
